//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g 2019-10-05 18:10:27

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using Expressions.Ast;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Expressions.Csharp 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
 internal  partial class CsharpParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARACTER_LITERAL", "DATETIME_LITERAL", "DECIMAL_LITERAL", "DOT", "Digits", "EscapeSequence", "Exponent", "FLOATING_POINT_LITERAL", "FloatTypeSuffix", "HEX_LITERAL", "HexDigit", "IDENTIFIER", "LETTER", "NumericTypeSuffix", "STRING_LITERAL", "TIMESPAN_LITERAL", "UnicodeEscape", "WS", "'!'", "'!='", "'%'", "'&&'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "':'", "'<'", "'<<'", "'<='", "'=='", "'>'", "'>='", "'>>'", "'?'", "'['", "']'", "'^'", "'false'", "'null'", "'true'", "'|'", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int CHARACTER_LITERAL=4;
	public const int DATETIME_LITERAL=5;
	public const int DECIMAL_LITERAL=6;
	public const int DOT=7;
	public const int Digits=8;
	public const int EscapeSequence=9;
	public const int Exponent=10;
	public const int FLOATING_POINT_LITERAL=11;
	public const int FloatTypeSuffix=12;
	public const int HEX_LITERAL=13;
	public const int HexDigit=14;
	public const int IDENTIFIER=15;
	public const int LETTER=16;
	public const int NumericTypeSuffix=17;
	public const int STRING_LITERAL=18;
	public const int TIMESPAN_LITERAL=19;
	public const int UnicodeEscape=20;
	public const int WS=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;

	public CsharpParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CsharpParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[65+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CsharpParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	private sealed partial class prog_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public prog_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:32:1: prog returns [IAstNode value] : expression EOF ;
	[GrammarRule("prog")]
	private CsharpParser.prog_return prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		CsharpParser.prog_return retval = new CsharpParser.prog_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int prog_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CsharpParser.expression_return expression1 = default(CsharpParser.expression_return);

		CommonTree EOF2_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(32, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:33:2: ( expression EOF )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:33:4: expression EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(33, 4);
			PushFollow(Follow._expression_in_prog115);
			expression1=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression1.Tree);
			DebugLocation(33, 15);
			if (state.backtracking == 0)
			{
				 retval.value = (expression1!=null?expression1.value:default(IAstNode)); 
			}
			DebugLocation(33, 47);
			EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_prog119); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF2_tree = (CommonTree)adaptor.Create(EOF2);
			adaptor.AddChild(root_0, EOF2_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
			if (state.backtracking > 0) { Memoize(input, 1, prog_StartIndex); }

		}
		DebugLocation(34, 1);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	private sealed partial class expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:36:1: expression returns [IAstNode value] : e= conditional_expression ;
	[GrammarRule("expression")]
	private CsharpParser.expression_return expression()
	{
		EnterRule_expression();
		EnterRule("expression", 2);
		TraceIn("expression", 2);
		CsharpParser.expression_return retval = new CsharpParser.expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CsharpParser.conditional_expression_return e = default(CsharpParser.conditional_expression_return);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(36, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:37:2: (e= conditional_expression )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:37:4: e= conditional_expression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(37, 5);
			PushFollow(Follow._conditional_expression_in_expression136);
			e=conditional_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(37, 29);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("expression", 2);
			LeaveRule("expression", 2);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 2, expression_StartIndex); }

		}
		DebugLocation(38, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	private sealed partial class conditional_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public conditional_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();
	// $ANTLR start "conditional_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:40:1: conditional_expression returns [IAstNode value] : e= logical_or_expression ( '?' t= expression ':' l= expression )? ;
	[GrammarRule("conditional_expression")]
	private CsharpParser.conditional_expression_return conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 3);
		TraceIn("conditional_expression", 3);
		CsharpParser.conditional_expression_return retval = new CsharpParser.conditional_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal3 = default(CommonToken);
		CommonToken char_literal4 = default(CommonToken);
		CsharpParser.logical_or_expression_return e = default(CsharpParser.logical_or_expression_return);
		CsharpParser.expression_return t = default(CsharpParser.expression_return);
		CsharpParser.expression_return l = default(CsharpParser.expression_return);

		CommonTree char_literal3_tree = default(CommonTree);
		CommonTree char_literal4_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(40, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:41:2: (e= logical_or_expression ( '?' t= expression ':' l= expression )? )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:41:4: e= logical_or_expression ( '?' t= expression ':' l= expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(41, 5);
			PushFollow(Follow._logical_or_expression_in_conditional_expression155);
			e=logical_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(41, 28);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(42, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:42:3: ( '?' t= expression ':' l= expression )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==42))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:42:5: '?' t= expression ':' l= expression
				{
				DebugLocation(42, 5);
				char_literal3=(CommonToken)Match(input,42,Follow._42_in_conditional_expression163); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal3_tree = (CommonTree)adaptor.Create(char_literal3);
				adaptor.AddChild(root_0, char_literal3_tree);
				}
				DebugLocation(42, 10);
				PushFollow(Follow._expression_in_conditional_expression167);
				t=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
				DebugLocation(42, 22);
				char_literal4=(CommonToken)Match(input,34,Follow._34_in_conditional_expression169); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal4_tree = (CommonTree)adaptor.Create(char_literal4);
				adaptor.AddChild(root_0, char_literal4_tree);
				}
				DebugLocation(42, 27);
				PushFollow(Follow._expression_in_conditional_expression173);
				l=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, l.Tree);
				DebugLocation(42, 39);
				if (state.backtracking == 0)
				{
					 retval.value = new Conditional((e!=null?e.value:default(IAstNode)), (t!=null?t.value:default(IAstNode)), (l!=null?l.value:default(IAstNode))); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("conditional_expression", 3);
			LeaveRule("conditional_expression", 3);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 3, conditional_expression_StartIndex); }

		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	private sealed partial class logical_or_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public logical_or_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_logical_or_expression();
	partial void LeaveRule_logical_or_expression();
	// $ANTLR start "logical_or_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:46:1: logical_or_expression returns [IAstNode value] : e= logical_and_expression ( '||' e= logical_and_expression )* ;
	[GrammarRule("logical_or_expression")]
	private CsharpParser.logical_or_expression_return logical_or_expression()
	{
		EnterRule_logical_or_expression();
		EnterRule("logical_or_expression", 4);
		TraceIn("logical_or_expression", 4);
		CsharpParser.logical_or_expression_return retval = new CsharpParser.logical_or_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int logical_or_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal5 = default(CommonToken);
		CsharpParser.logical_and_expression_return e = default(CsharpParser.logical_and_expression_return);

		CommonTree string_literal5_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logical_or_expression");
		DebugLocation(46, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:47:2: (e= logical_and_expression ( '||' e= logical_and_expression )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:47:4: e= logical_and_expression ( '||' e= logical_and_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(47, 5);
			PushFollow(Follow._logical_and_expression_in_logical_or_expression197);
			e=logical_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(47, 29);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(48, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:48:3: ( '||' e= logical_and_expression )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==50))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:48:5: '||' e= logical_and_expression
					{
					DebugLocation(48, 5);
					string_literal5=(CommonToken)Match(input,50,Follow._50_in_logical_or_expression205); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal5_tree = (CommonTree)adaptor.Create(string_literal5);
					adaptor.AddChild(root_0, string_literal5_tree);
					}
					DebugLocation(48, 11);
					PushFollow(Follow._logical_and_expression_in_logical_or_expression209);
					e=logical_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(49, 5);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.LogicalOr); 
					}

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("logical_or_expression", 4);
			LeaveRule("logical_or_expression", 4);
			LeaveRule_logical_or_expression();
			if (state.backtracking > 0) { Memoize(input, 4, logical_or_expression_StartIndex); }

		}
		DebugLocation(51, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_or_expression"); }
		return retval;

	}
	// $ANTLR end "logical_or_expression"

	private sealed partial class logical_and_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public logical_and_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();
	// $ANTLR start "logical_and_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:53:1: logical_and_expression returns [IAstNode value] : e= bitwise_or_expression ( '&&' e= bitwise_or_expression )* ;
	[GrammarRule("logical_and_expression")]
	private CsharpParser.logical_and_expression_return logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 5);
		TraceIn("logical_and_expression", 5);
		CsharpParser.logical_and_expression_return retval = new CsharpParser.logical_and_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int logical_and_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal6 = default(CommonToken);
		CsharpParser.bitwise_or_expression_return e = default(CsharpParser.bitwise_or_expression_return);

		CommonTree string_literal6_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(53, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:54:2: (e= bitwise_or_expression ( '&&' e= bitwise_or_expression )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:54:4: e= bitwise_or_expression ( '&&' e= bitwise_or_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(54, 5);
			PushFollow(Follow._bitwise_or_expression_in_logical_and_expression237);
			e=bitwise_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(54, 28);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(55, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:55:3: ( '&&' e= bitwise_or_expression )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==25))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:55:5: '&&' e= bitwise_or_expression
					{
					DebugLocation(55, 5);
					string_literal6=(CommonToken)Match(input,25,Follow._25_in_logical_and_expression245); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal6_tree = (CommonTree)adaptor.Create(string_literal6);
					adaptor.AddChild(root_0, string_literal6_tree);
					}
					DebugLocation(55, 11);
					PushFollow(Follow._bitwise_or_expression_in_logical_and_expression249);
					e=bitwise_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(56, 5);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.LogicalAnd); 
					}

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("logical_and_expression", 5);
			LeaveRule("logical_and_expression", 5);
			LeaveRule_logical_and_expression();
			if (state.backtracking > 0) { Memoize(input, 5, logical_and_expression_StartIndex); }

		}
		DebugLocation(58, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	private sealed partial class bitwise_or_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public bitwise_or_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_bitwise_or_expression();
	partial void LeaveRule_bitwise_or_expression();
	// $ANTLR start "bitwise_or_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:60:1: bitwise_or_expression returns [IAstNode value] : e= bitwise_xor_expression ( '|' e= bitwise_xor_expression )* ;
	[GrammarRule("bitwise_or_expression")]
	private CsharpParser.bitwise_or_expression_return bitwise_or_expression()
	{
		EnterRule_bitwise_or_expression();
		EnterRule("bitwise_or_expression", 6);
		TraceIn("bitwise_or_expression", 6);
		CsharpParser.bitwise_or_expression_return retval = new CsharpParser.bitwise_or_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int bitwise_or_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal7 = default(CommonToken);
		CsharpParser.bitwise_xor_expression_return e = default(CsharpParser.bitwise_xor_expression_return);

		CommonTree char_literal7_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "bitwise_or_expression");
		DebugLocation(60, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:61:2: (e= bitwise_xor_expression ( '|' e= bitwise_xor_expression )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:61:4: e= bitwise_xor_expression ( '|' e= bitwise_xor_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(61, 5);
			PushFollow(Follow._bitwise_xor_expression_in_bitwise_or_expression278);
			e=bitwise_xor_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(61, 29);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(62, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:62:3: ( '|' e= bitwise_xor_expression )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==49))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:62:5: '|' e= bitwise_xor_expression
					{
					DebugLocation(62, 5);
					char_literal7=(CommonToken)Match(input,49,Follow._49_in_bitwise_or_expression286); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal7_tree = (CommonTree)adaptor.Create(char_literal7);
					adaptor.AddChild(root_0, char_literal7_tree);
					}
					DebugLocation(62, 10);
					PushFollow(Follow._bitwise_xor_expression_in_bitwise_or_expression290);
					e=bitwise_xor_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(63, 5);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.BitwiseOr); 
					}

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("bitwise_or_expression", 6);
			LeaveRule("bitwise_or_expression", 6);
			LeaveRule_bitwise_or_expression();
			if (state.backtracking > 0) { Memoize(input, 6, bitwise_or_expression_StartIndex); }

		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwise_or_expression"); }
		return retval;

	}
	// $ANTLR end "bitwise_or_expression"

	private sealed partial class bitwise_xor_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public bitwise_xor_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_bitwise_xor_expression();
	partial void LeaveRule_bitwise_xor_expression();
	// $ANTLR start "bitwise_xor_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:67:1: bitwise_xor_expression returns [IAstNode value] : e= bitwise_and_expression ( '^' e= bitwise_and_expression )* ;
	[GrammarRule("bitwise_xor_expression")]
	private CsharpParser.bitwise_xor_expression_return bitwise_xor_expression()
	{
		EnterRule_bitwise_xor_expression();
		EnterRule("bitwise_xor_expression", 7);
		TraceIn("bitwise_xor_expression", 7);
		CsharpParser.bitwise_xor_expression_return retval = new CsharpParser.bitwise_xor_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int bitwise_xor_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal8 = default(CommonToken);
		CsharpParser.bitwise_and_expression_return e = default(CsharpParser.bitwise_and_expression_return);

		CommonTree char_literal8_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "bitwise_xor_expression");
		DebugLocation(67, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:68:2: (e= bitwise_and_expression ( '^' e= bitwise_and_expression )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:68:4: e= bitwise_and_expression ( '^' e= bitwise_and_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(68, 5);
			PushFollow(Follow._bitwise_and_expression_in_bitwise_xor_expression319);
			e=bitwise_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(68, 29);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(69, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:69:3: ( '^' e= bitwise_and_expression )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==45))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:69:5: '^' e= bitwise_and_expression
					{
					DebugLocation(69, 5);
					char_literal8=(CommonToken)Match(input,45,Follow._45_in_bitwise_xor_expression327); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal8_tree = (CommonTree)adaptor.Create(char_literal8);
					adaptor.AddChild(root_0, char_literal8_tree);
					}
					DebugLocation(69, 10);
					PushFollow(Follow._bitwise_and_expression_in_bitwise_xor_expression331);
					e=bitwise_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(70, 5);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Xor); 
					}

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("bitwise_xor_expression", 7);
			LeaveRule("bitwise_xor_expression", 7);
			LeaveRule_bitwise_xor_expression();
			if (state.backtracking > 0) { Memoize(input, 7, bitwise_xor_expression_StartIndex); }

		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwise_xor_expression"); }
		return retval;

	}
	// $ANTLR end "bitwise_xor_expression"

	private sealed partial class bitwise_and_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public bitwise_and_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_bitwise_and_expression();
	partial void LeaveRule_bitwise_and_expression();
	// $ANTLR start "bitwise_and_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:74:1: bitwise_and_expression returns [IAstNode value] : e= unary_not_expression ( '&' e= unary_not_expression )* ;
	[GrammarRule("bitwise_and_expression")]
	private CsharpParser.bitwise_and_expression_return bitwise_and_expression()
	{
		EnterRule_bitwise_and_expression();
		EnterRule("bitwise_and_expression", 8);
		TraceIn("bitwise_and_expression", 8);
		CsharpParser.bitwise_and_expression_return retval = new CsharpParser.bitwise_and_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int bitwise_and_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal9 = default(CommonToken);
		CsharpParser.unary_not_expression_return e = default(CsharpParser.unary_not_expression_return);

		CommonTree char_literal9_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "bitwise_and_expression");
		DebugLocation(74, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:75:2: (e= unary_not_expression ( '&' e= unary_not_expression )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:75:4: e= unary_not_expression ( '&' e= unary_not_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(75, 5);
			PushFollow(Follow._unary_not_expression_in_bitwise_and_expression361);
			e=unary_not_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(75, 27);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(76, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:76:3: ( '&' e= unary_not_expression )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==26))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:76:5: '&' e= unary_not_expression
					{
					DebugLocation(76, 5);
					char_literal9=(CommonToken)Match(input,26,Follow._26_in_bitwise_and_expression369); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal9_tree = (CommonTree)adaptor.Create(char_literal9);
					adaptor.AddChild(root_0, char_literal9_tree);
					}
					DebugLocation(76, 10);
					PushFollow(Follow._unary_not_expression_in_bitwise_and_expression373);
					e=unary_not_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(77, 5);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.BitwiseAnd); 
					}

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("bitwise_and_expression", 8);
			LeaveRule("bitwise_and_expression", 8);
			LeaveRule_bitwise_and_expression();
			if (state.backtracking > 0) { Memoize(input, 8, bitwise_and_expression_StartIndex); }

		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "bitwise_and_expression"); }
		return retval;

	}
	// $ANTLR end "bitwise_and_expression"

	private sealed partial class unary_not_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public unary_not_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_unary_not_expression();
	partial void LeaveRule_unary_not_expression();
	// $ANTLR start "unary_not_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:81:1: unary_not_expression returns [IAstNode value] : (e= equality_expression | '!' u= unary_not_expression | '~' u= unary_not_expression );
	[GrammarRule("unary_not_expression")]
	private CsharpParser.unary_not_expression_return unary_not_expression()
	{
		EnterRule_unary_not_expression();
		EnterRule("unary_not_expression", 9);
		TraceIn("unary_not_expression", 9);
		CsharpParser.unary_not_expression_return retval = new CsharpParser.unary_not_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int unary_not_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal10 = default(CommonToken);
		CommonToken char_literal11 = default(CommonToken);
		CsharpParser.equality_expression_return e = default(CsharpParser.equality_expression_return);
		CsharpParser.unary_not_expression_return u = default(CsharpParser.unary_not_expression_return);

		CommonTree char_literal10_tree = default(CommonTree);
		CommonTree char_literal11_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unary_not_expression");
		DebugLocation(81, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:82:2: (e= equality_expression | '!' u= unary_not_expression | '~' u= unary_not_expression )
			int alt7=3;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DATETIME_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case STRING_LITERAL:
			case TIMESPAN_LITERAL:
			case 27:
			case 30:
			case 32:
			case 46:
			case 47:
			case 48:
				{
				alt7 = 1;
				}
				break;
			case 22:
				{
				alt7 = 2;
				}
				break;
			case 51:
				{
				alt7 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:82:4: e= equality_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(82, 5);
				PushFollow(Follow._equality_expression_in_unary_not_expression401);
				e=equality_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(82, 26);
				if (state.backtracking == 0)
				{
					 retval.value = (e!=null?e.value:default(IAstNode)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:83:4: '!' u= unary_not_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(83, 4);
				char_literal10=(CommonToken)Match(input,22,Follow._22_in_unary_not_expression408); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal10_tree = (CommonTree)adaptor.Create(char_literal10);
				adaptor.AddChild(root_0, char_literal10_tree);
				}
				DebugLocation(83, 9);
				PushFollow(Follow._unary_not_expression_in_unary_not_expression412);
				u=unary_not_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, u.Tree);
				DebugLocation(83, 31);
				if (state.backtracking == 0)
				{
					 retval.value = new UnaryExpression((u!=null?u.value:default(IAstNode)), ExpressionType.LogicalNot); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:84:4: '~' u= unary_not_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(84, 4);
				char_literal11=(CommonToken)Match(input,51,Follow._51_in_unary_not_expression419); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal11_tree = (CommonTree)adaptor.Create(char_literal11);
				adaptor.AddChild(root_0, char_literal11_tree);
				}
				DebugLocation(84, 9);
				PushFollow(Follow._unary_not_expression_in_unary_not_expression423);
				u=unary_not_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, u.Tree);
				DebugLocation(84, 31);
				if (state.backtracking == 0)
				{
					 retval.value = new UnaryExpression((u!=null?u.value:default(IAstNode)), ExpressionType.BitwiseNot); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("unary_not_expression", 9);
			LeaveRule("unary_not_expression", 9);
			LeaveRule_unary_not_expression();
			if (state.backtracking > 0) { Memoize(input, 9, unary_not_expression_StartIndex); }

		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_not_expression"); }
		return retval;

	}
	// $ANTLR end "unary_not_expression"

	private sealed partial class equality_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public equality_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();
	// $ANTLR start "equality_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:87:1: equality_expression returns [IAstNode value] : e= relational_expression ( ( '==' e= relational_expression | '!=' e= relational_expression ) )* ;
	[GrammarRule("equality_expression")]
	private CsharpParser.equality_expression_return equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 10);
		TraceIn("equality_expression", 10);
		CsharpParser.equality_expression_return retval = new CsharpParser.equality_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal12 = default(CommonToken);
		CommonToken string_literal13 = default(CommonToken);
		CsharpParser.relational_expression_return e = default(CsharpParser.relational_expression_return);

		CommonTree string_literal12_tree = default(CommonTree);
		CommonTree string_literal13_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(87, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:88:2: (e= relational_expression ( ( '==' e= relational_expression | '!=' e= relational_expression ) )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:88:4: e= relational_expression ( ( '==' e= relational_expression | '!=' e= relational_expression ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(88, 5);
			PushFollow(Follow._relational_expression_in_equality_expression442);
			e=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(88, 28);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(89, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:89:3: ( ( '==' e= relational_expression | '!=' e= relational_expression ) )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==23||LA9_1==38))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:90:4: ( '==' e= relational_expression | '!=' e= relational_expression )
					{
					DebugLocation(90, 4);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:90:4: ( '==' e= relational_expression | '!=' e= relational_expression )
					int alt8=2;
					try { DebugEnterSubRule(8);
					try { DebugEnterDecision(8, false);
					int LA8_1 = input.LA(1);

					if ((LA8_1==38))
					{
						alt8 = 1;
					}
					else if ((LA8_1==23))
					{
						alt8 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:90:6: '==' e= relational_expression
						{
						DebugLocation(90, 6);
						string_literal12=(CommonToken)Match(input,38,Follow._38_in_equality_expression455); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal12_tree = (CommonTree)adaptor.Create(string_literal12);
						adaptor.AddChild(root_0, string_literal12_tree);
						}
						DebugLocation(90, 12);
						PushFollow(Follow._relational_expression_in_equality_expression459);
						e=relational_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
						DebugLocation(90, 35);
						if (state.backtracking == 0)
						{
							 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Equals); 
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:91:6: '!=' e= relational_expression
						{
						DebugLocation(91, 6);
						string_literal13=(CommonToken)Match(input,23,Follow._23_in_equality_expression468); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal13_tree = (CommonTree)adaptor.Create(string_literal13);
						adaptor.AddChild(root_0, string_literal13_tree);
						}
						DebugLocation(91, 12);
						PushFollow(Follow._relational_expression_in_equality_expression472);
						e=relational_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
						DebugLocation(91, 35);
						if (state.backtracking == 0)
						{
							 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.NotEquals); 
						}

						}
						break;

					}
					} finally { DebugExitSubRule(8); }


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("equality_expression", 10);
			LeaveRule("equality_expression", 10);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 10, equality_expression_StartIndex); }

		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	private sealed partial class relational_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public relational_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();
	// $ANTLR start "relational_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:96:1: relational_expression returns [IAstNode value] : e= shift_expression ( ( '<' e= shift_expression | '>' e= shift_expression | '<=' e= shift_expression | '>=' e= shift_expression ) )* ;
	[GrammarRule("relational_expression")]
	private CsharpParser.relational_expression_return relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 11);
		TraceIn("relational_expression", 11);
		CsharpParser.relational_expression_return retval = new CsharpParser.relational_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal14 = default(CommonToken);
		CommonToken char_literal15 = default(CommonToken);
		CommonToken string_literal16 = default(CommonToken);
		CommonToken string_literal17 = default(CommonToken);
		CsharpParser.shift_expression_return e = default(CsharpParser.shift_expression_return);

		CommonTree char_literal14_tree = default(CommonTree);
		CommonTree char_literal15_tree = default(CommonTree);
		CommonTree string_literal16_tree = default(CommonTree);
		CommonTree string_literal17_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(96, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:97:2: (e= shift_expression ( ( '<' e= shift_expression | '>' e= shift_expression | '<=' e= shift_expression | '>=' e= shift_expression ) )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:97:4: e= shift_expression ( ( '<' e= shift_expression | '>' e= shift_expression | '<=' e= shift_expression | '>=' e= shift_expression ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(97, 5);
			PushFollow(Follow._shift_expression_in_relational_expression501);
			e=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(97, 23);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(98, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:98:3: ( ( '<' e= shift_expression | '>' e= shift_expression | '<=' e= shift_expression | '>=' e= shift_expression ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==35||LA11_1==37||(LA11_1>=39 && LA11_1<=40)))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:99:4: ( '<' e= shift_expression | '>' e= shift_expression | '<=' e= shift_expression | '>=' e= shift_expression )
					{
					DebugLocation(99, 4);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:99:4: ( '<' e= shift_expression | '>' e= shift_expression | '<=' e= shift_expression | '>=' e= shift_expression )
					int alt10=4;
					try { DebugEnterSubRule(10);
					try { DebugEnterDecision(10, false);
					switch (input.LA(1))
					{
					case 35:
						{
						alt10 = 1;
						}
						break;
					case 39:
						{
						alt10 = 2;
						}
						break;
					case 37:
						{
						alt10 = 3;
						}
						break;
					case 40:
						{
						alt10 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:99:6: '<' e= shift_expression
						{
						DebugLocation(99, 6);
						char_literal14=(CommonToken)Match(input,35,Follow._35_in_relational_expression514); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal14_tree = (CommonTree)adaptor.Create(char_literal14);
						adaptor.AddChild(root_0, char_literal14_tree);
						}
						DebugLocation(99, 11);
						PushFollow(Follow._shift_expression_in_relational_expression518);
						e=shift_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
						DebugLocation(99, 29);
						if (state.backtracking == 0)
						{
							 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Less); 
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:100:6: '>' e= shift_expression
						{
						DebugLocation(100, 6);
						char_literal15=(CommonToken)Match(input,39,Follow._39_in_relational_expression527); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal15_tree = (CommonTree)adaptor.Create(char_literal15);
						adaptor.AddChild(root_0, char_literal15_tree);
						}
						DebugLocation(100, 11);
						PushFollow(Follow._shift_expression_in_relational_expression531);
						e=shift_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
						DebugLocation(100, 29);
						if (state.backtracking == 0)
						{
							 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Greater); 
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:101:6: '<=' e= shift_expression
						{
						DebugLocation(101, 6);
						string_literal16=(CommonToken)Match(input,37,Follow._37_in_relational_expression540); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal16_tree = (CommonTree)adaptor.Create(string_literal16);
						adaptor.AddChild(root_0, string_literal16_tree);
						}
						DebugLocation(101, 12);
						PushFollow(Follow._shift_expression_in_relational_expression544);
						e=shift_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
						DebugLocation(101, 30);
						if (state.backtracking == 0)
						{
							 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.LessOrEquals); 
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:102:6: '>=' e= shift_expression
						{
						DebugLocation(102, 6);
						string_literal17=(CommonToken)Match(input,40,Follow._40_in_relational_expression553); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal17_tree = (CommonTree)adaptor.Create(string_literal17);
						adaptor.AddChild(root_0, string_literal17_tree);
						}
						DebugLocation(102, 12);
						PushFollow(Follow._shift_expression_in_relational_expression557);
						e=shift_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
						DebugLocation(102, 30);
						if (state.backtracking == 0)
						{
							 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.GreaterOrEquals); 
						}

						}
						break;

					}
					} finally { DebugExitSubRule(10); }


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("relational_expression", 11);
			LeaveRule("relational_expression", 11);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 11, relational_expression_StartIndex); }

		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	private sealed partial class shift_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public shift_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();
	// $ANTLR start "shift_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:107:1: shift_expression returns [IAstNode value] : e= additive_expression ( ( '<<' e= additive_expression | '>>' e= additive_expression ) )* ;
	[GrammarRule("shift_expression")]
	private CsharpParser.shift_expression_return shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 12);
		TraceIn("shift_expression", 12);
		CsharpParser.shift_expression_return retval = new CsharpParser.shift_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal18 = default(CommonToken);
		CommonToken string_literal19 = default(CommonToken);
		CsharpParser.additive_expression_return e = default(CsharpParser.additive_expression_return);

		CommonTree string_literal18_tree = default(CommonTree);
		CommonTree string_literal19_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(107, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:108:2: (e= additive_expression ( ( '<<' e= additive_expression | '>>' e= additive_expression ) )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:108:4: e= additive_expression ( ( '<<' e= additive_expression | '>>' e= additive_expression ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(108, 5);
			PushFollow(Follow._additive_expression_in_shift_expression586);
			e=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(108, 26);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(109, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:109:3: ( ( '<<' e= additive_expression | '>>' e= additive_expression ) )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==36||LA13_1==41))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:110:4: ( '<<' e= additive_expression | '>>' e= additive_expression )
					{
					DebugLocation(110, 4);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:110:4: ( '<<' e= additive_expression | '>>' e= additive_expression )
					int alt12=2;
					try { DebugEnterSubRule(12);
					try { DebugEnterDecision(12, false);
					int LA12_1 = input.LA(1);

					if ((LA12_1==36))
					{
						alt12 = 1;
					}
					else if ((LA12_1==41))
					{
						alt12 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:110:6: '<<' e= additive_expression
						{
						DebugLocation(110, 6);
						string_literal18=(CommonToken)Match(input,36,Follow._36_in_shift_expression599); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal18_tree = (CommonTree)adaptor.Create(string_literal18);
						adaptor.AddChild(root_0, string_literal18_tree);
						}
						DebugLocation(110, 12);
						PushFollow(Follow._additive_expression_in_shift_expression603);
						e=additive_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
						DebugLocation(110, 33);
						if (state.backtracking == 0)
						{
							 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.ShiftLeft); 
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:111:6: '>>' e= additive_expression
						{
						DebugLocation(111, 6);
						string_literal19=(CommonToken)Match(input,41,Follow._41_in_shift_expression612); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal19_tree = (CommonTree)adaptor.Create(string_literal19);
						adaptor.AddChild(root_0, string_literal19_tree);
						}
						DebugLocation(111, 12);
						PushFollow(Follow._additive_expression_in_shift_expression616);
						e=additive_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
						DebugLocation(111, 33);
						if (state.backtracking == 0)
						{
							 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.ShiftRight); 
						}

						}
						break;

					}
					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("shift_expression", 12);
			LeaveRule("shift_expression", 12);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 12, shift_expression_StartIndex); }

		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	private sealed partial class additive_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public additive_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();
	// $ANTLR start "additive_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:116:1: additive_expression returns [IAstNode value] : e= multiplicative_expression ( '+' e= multiplicative_expression | '-' e= multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	private CsharpParser.additive_expression_return additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 13);
		TraceIn("additive_expression", 13);
		CsharpParser.additive_expression_return retval = new CsharpParser.additive_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal20 = default(CommonToken);
		CommonToken char_literal21 = default(CommonToken);
		CsharpParser.multiplicative_expression_return e = default(CsharpParser.multiplicative_expression_return);

		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal21_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(116, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:117:2: (e= multiplicative_expression ( '+' e= multiplicative_expression | '-' e= multiplicative_expression )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:117:4: e= multiplicative_expression ( '+' e= multiplicative_expression | '-' e= multiplicative_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(117, 5);
			PushFollow(Follow._multiplicative_expression_in_additive_expression645);
			e=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(117, 32);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(118, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:118:3: ( '+' e= multiplicative_expression | '-' e= multiplicative_expression )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=3;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==30))
				{
					alt14 = 1;
				}
				else if ((LA14_1==32))
				{
					alt14 = 2;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:118:5: '+' e= multiplicative_expression
					{
					DebugLocation(118, 5);
					char_literal20=(CommonToken)Match(input,30,Follow._30_in_additive_expression653); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal20_tree = (CommonTree)adaptor.Create(char_literal20);
					adaptor.AddChild(root_0, char_literal20_tree);
					}
					DebugLocation(118, 10);
					PushFollow(Follow._multiplicative_expression_in_additive_expression657);
					e=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(118, 37);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Add); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:119:5: '-' e= multiplicative_expression
					{
					DebugLocation(119, 5);
					char_literal21=(CommonToken)Match(input,32,Follow._32_in_additive_expression665); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal21_tree = (CommonTree)adaptor.Create(char_literal21);
					adaptor.AddChild(root_0, char_literal21_tree);
					}
					DebugLocation(119, 10);
					PushFollow(Follow._multiplicative_expression_in_additive_expression669);
					e=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(119, 37);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Subtract); 
					}

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("additive_expression", 13);
			LeaveRule("additive_expression", 13);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 13, additive_expression_StartIndex); }

		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	private sealed partial class multiplicative_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public multiplicative_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();
	// $ANTLR start "multiplicative_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:123:1: multiplicative_expression returns [IAstNode value] : e= cast_expression ( '*' e= cast_expression | '/' e= cast_expression | '%' e= cast_expression )* ;
	[GrammarRule("multiplicative_expression")]
	private CsharpParser.multiplicative_expression_return multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 14);
		TraceIn("multiplicative_expression", 14);
		CsharpParser.multiplicative_expression_return retval = new CsharpParser.multiplicative_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal22 = default(CommonToken);
		CommonToken char_literal23 = default(CommonToken);
		CommonToken char_literal24 = default(CommonToken);
		CsharpParser.cast_expression_return e = default(CsharpParser.cast_expression_return);

		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(123, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:124:2: (e= cast_expression ( '*' e= cast_expression | '/' e= cast_expression | '%' e= cast_expression )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:124:4: e= cast_expression ( '*' e= cast_expression | '/' e= cast_expression | '%' e= cast_expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(124, 5);
			PushFollow(Follow._cast_expression_in_multiplicative_expression693);
			e=cast_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(124, 22);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.value:default(IAstNode)); 
			}
			DebugLocation(125, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:125:3: ( '*' e= cast_expression | '/' e= cast_expression | '%' e= cast_expression )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=4;
				try { DebugEnterDecision(15, false);
				switch (input.LA(1))
				{
				case 29:
					{
					alt15 = 1;
					}
					break;
				case 33:
					{
					alt15 = 2;
					}
					break;
				case 24:
					{
					alt15 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:125:5: '*' e= cast_expression
					{
					DebugLocation(125, 5);
					char_literal22=(CommonToken)Match(input,29,Follow._29_in_multiplicative_expression701); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal22_tree = (CommonTree)adaptor.Create(char_literal22);
					adaptor.AddChild(root_0, char_literal22_tree);
					}
					DebugLocation(125, 10);
					PushFollow(Follow._cast_expression_in_multiplicative_expression705);
					e=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(125, 27);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Multiply); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:126:5: '/' e= cast_expression
					{
					DebugLocation(126, 5);
					char_literal23=(CommonToken)Match(input,33,Follow._33_in_multiplicative_expression713); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal23_tree = (CommonTree)adaptor.Create(char_literal23);
					adaptor.AddChild(root_0, char_literal23_tree);
					}
					DebugLocation(126, 10);
					PushFollow(Follow._cast_expression_in_multiplicative_expression717);
					e=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(126, 27);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Divide); 
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:127:5: '%' e= cast_expression
					{
					DebugLocation(127, 5);
					char_literal24=(CommonToken)Match(input,24,Follow._24_in_multiplicative_expression725); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal24_tree = (CommonTree)adaptor.Create(char_literal24);
					adaptor.AddChild(root_0, char_literal24_tree);
					}
					DebugLocation(127, 10);
					PushFollow(Follow._cast_expression_in_multiplicative_expression729);
					e=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(127, 27);
					if (state.backtracking == 0)
					{
						 retval.value = new BinaryExpression(retval.value, (e!=null?e.value:default(IAstNode)), ExpressionType.Modulo); 
					}

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("multiplicative_expression", 14);
			LeaveRule("multiplicative_expression", 14);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 14, multiplicative_expression_StartIndex); }

		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	private sealed partial class cast_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public cast_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();
	// $ANTLR start "cast_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:131:1: cast_expression returns [IAstNode value] : ( '(' t= type_expression ')' e= cast_expression |u= unary_expression );
	[GrammarRule("cast_expression")]
	private CsharpParser.cast_expression_return cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 15);
		TraceIn("cast_expression", 15);
		CsharpParser.cast_expression_return retval = new CsharpParser.cast_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal25 = default(CommonToken);
		CommonToken char_literal26 = default(CommonToken);
		CsharpParser.type_expression_return t = default(CsharpParser.type_expression_return);
		CsharpParser.cast_expression_return e = default(CsharpParser.cast_expression_return);
		CsharpParser.unary_expression_return u = default(CsharpParser.unary_expression_return);

		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(131, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:132:2: ( '(' t= type_expression ')' e= cast_expression |u= unary_expression )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==27))
			{
				int LA16_2 = input.LA(2);

				if ((LA16_2==IDENTIFIER))
				{
					int LA16_3 = input.LA(3);

					if ((EvaluatePredicate(synpred22_Csharp_fragment)))
					{
						alt16 = 1;
					}
					else if ((true))
					{
						alt16 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 16, 15, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if (((LA16_2>=CHARACTER_LITERAL && LA16_2<=DECIMAL_LITERAL)||LA16_2==FLOATING_POINT_LITERAL||LA16_2==HEX_LITERAL||(LA16_2>=STRING_LITERAL && LA16_2<=TIMESPAN_LITERAL)||LA16_2==22||LA16_2==27||LA16_2==30||LA16_2==32||(LA16_2>=46 && LA16_2<=48)||LA16_2==51))
				{
					alt16 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if (((LA16_1>=CHARACTER_LITERAL && LA16_1<=DECIMAL_LITERAL)||LA16_1==FLOATING_POINT_LITERAL||LA16_1==HEX_LITERAL||LA16_1==IDENTIFIER||(LA16_1>=STRING_LITERAL && LA16_1<=TIMESPAN_LITERAL)||LA16_1==30||LA16_1==32||(LA16_1>=46 && LA16_1<=48)))
			{
				alt16 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:132:4: '(' t= type_expression ')' e= cast_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(132, 4);
				char_literal25=(CommonToken)Match(input,27,Follow._27_in_cast_expression751); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal25_tree = (CommonTree)adaptor.Create(char_literal25);
				adaptor.AddChild(root_0, char_literal25_tree);
				}
				DebugLocation(132, 9);
				PushFollow(Follow._type_expression_in_cast_expression755);
				t=type_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, t.Tree);
				DebugLocation(132, 26);
				char_literal26=(CommonToken)Match(input,28,Follow._28_in_cast_expression757); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal26_tree = (CommonTree)adaptor.Create(char_literal26);
				adaptor.AddChild(root_0, char_literal26_tree);
				}
				DebugLocation(132, 31);
				PushFollow(Follow._cast_expression_in_cast_expression761);
				e=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(132, 48);
				if (state.backtracking == 0)
				{
					 retval.value = new Cast((e!=null?e.value:default(IAstNode)), (t!=null?t.value:default(TypeIdentifier))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:133:4: u= unary_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(133, 5);
				PushFollow(Follow._unary_expression_in_cast_expression770);
				u=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, u.Tree);
				DebugLocation(133, 23);
				if (state.backtracking == 0)
				{
					 retval.value = (u!=null?u.value:default(IAstNode)); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("cast_expression", 15);
			LeaveRule("cast_expression", 15);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 15, cast_expression_StartIndex); }

		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	private sealed partial class type_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public TypeIdentifier value;
		public type_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_type_expression();
	partial void LeaveRule_type_expression();
	// $ANTLR start "type_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:136:1: type_expression returns [TypeIdentifier value] : e= type_identifier ( '[' ( ',' )* ']' )? ;
	[GrammarRule("type_expression")]
	private CsharpParser.type_expression_return type_expression()
	{
		EnterRule_type_expression();
		EnterRule("type_expression", 16);
		TraceIn("type_expression", 16);
		CsharpParser.type_expression_return retval = new CsharpParser.type_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int type_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal27 = default(CommonToken);
		CommonToken char_literal28 = default(CommonToken);
		CommonToken char_literal29 = default(CommonToken);
		CsharpParser.type_identifier_return e = default(CsharpParser.type_identifier_return);

		CommonTree char_literal27_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree char_literal29_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_expression");
		DebugLocation(136, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:137:2: (e= type_identifier ( '[' ( ',' )* ']' )? )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:137:4: e= type_identifier ( '[' ( ',' )* ']' )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(137, 5);
			PushFollow(Follow._type_identifier_in_type_expression789);
			e=type_identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(137, 22);
			if (state.backtracking == 0)
			{
				 retval.value = new TypeIdentifier((e!=null?e.value:default(string)), 0); 
			}
			DebugLocation(138, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:138:3: ( '[' ( ',' )* ']' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==43))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:139:4: '[' ( ',' )* ']'
				{
				DebugLocation(139, 4);
				char_literal27=(CommonToken)Match(input,43,Follow._43_in_type_expression800); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal27_tree = (CommonTree)adaptor.Create(char_literal27);
				adaptor.AddChild(root_0, char_literal27_tree);
				}
				DebugLocation(139, 8);
				if (state.backtracking == 0)
				{
					 retval.value = new TypeIdentifier(retval.value.Name, 1); 
				}
				DebugLocation(140, 5);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:140:5: ( ',' )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_1 = input.LA(1);

					if ((LA17_1==31))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:140:7: ','
						{
						DebugLocation(140, 7);
						char_literal28=(CommonToken)Match(input,31,Follow._31_in_type_expression810); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal28_tree = (CommonTree)adaptor.Create(char_literal28);
						adaptor.AddChild(root_0, char_literal28_tree);
						}
						DebugLocation(140, 11);
						if (state.backtracking == 0)
						{
							 retval.value = new TypeIdentifier(retval.value.Name, retval.value.ArrayIndex + 1); 
						}

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(142, 4);
				char_literal29=(CommonToken)Match(input,44,Follow._44_in_type_expression824); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal29_tree = (CommonTree)adaptor.Create(char_literal29);
				adaptor.AddChild(root_0, char_literal29_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("type_expression", 16);
			LeaveRule("type_expression", 16);
			LeaveRule_type_expression();
			if (state.backtracking > 0) { Memoize(input, 16, type_expression_StartIndex); }

		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "type_expression"); }
		return retval;

	}
	// $ANTLR end "type_expression"

	private sealed partial class type_identifier_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public string value;
		public type_identifier_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_type_identifier();
	partial void LeaveRule_type_identifier();
	// $ANTLR start "type_identifier"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:146:1: type_identifier returns [string value] : e= IDENTIFIER ( DOT e= IDENTIFIER )* ;
	[GrammarRule("type_identifier")]
	private CsharpParser.type_identifier_return type_identifier()
	{
		EnterRule_type_identifier();
		EnterRule("type_identifier", 17);
		TraceIn("type_identifier", 17);
		CsharpParser.type_identifier_return retval = new CsharpParser.type_identifier_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int type_identifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken e = default(CommonToken);
		CommonToken DOT30 = default(CommonToken);

		CommonTree e_tree = default(CommonTree);
		CommonTree DOT30_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_identifier");
		DebugLocation(146, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:147:2: (e= IDENTIFIER ( DOT e= IDENTIFIER )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:147:4: e= IDENTIFIER ( DOT e= IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(147, 5);
			e=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_identifier846); if (state.failed) return retval;
			if (state.backtracking == 0) {
			e_tree = (CommonTree)adaptor.Create(e);
			adaptor.AddChild(root_0, e_tree);
			}
			DebugLocation(147, 17);
			if (state.backtracking == 0)
			{
				 retval.value = (e!=null?e.Text:null); 
			}
			DebugLocation(147, 39);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:147:39: ( DOT e= IDENTIFIER )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==DOT))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:147:41: DOT e= IDENTIFIER
					{
					DebugLocation(147, 41);
					DOT30=(CommonToken)Match(input,DOT,Follow._DOT_in_type_identifier852); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DOT30_tree = (CommonTree)adaptor.Create(DOT30);
					adaptor.AddChild(root_0, DOT30_tree);
					}
					DebugLocation(147, 46);
					e=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_identifier856); if (state.failed) return retval;
					if (state.backtracking == 0) {
					e_tree = (CommonTree)adaptor.Create(e);
					adaptor.AddChild(root_0, e_tree);
					}
					DebugLocation(147, 58);
					if (state.backtracking == 0)
					{
						 retval.value = retval.value + "." + (e!=null?e.Text:null); 
					}

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("type_identifier", 17);
			LeaveRule("type_identifier", 17);
			LeaveRule_type_identifier();
			if (state.backtracking > 0) { Memoize(input, 17, type_identifier_StartIndex); }

		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "type_identifier"); }
		return retval;

	}
	// $ANTLR end "type_identifier"

	private sealed partial class unary_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public unary_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();
	// $ANTLR start "unary_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:150:1: unary_expression returns [IAstNode value] : (p= postfix_expression | ( '+' e= cast_expression | '-' e= cast_expression ) );
	[GrammarRule("unary_expression")]
	private CsharpParser.unary_expression_return unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 18);
		TraceIn("unary_expression", 18);
		CsharpParser.unary_expression_return retval = new CsharpParser.unary_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal31 = default(CommonToken);
		CommonToken char_literal32 = default(CommonToken);
		CsharpParser.postfix_expression_return p = default(CsharpParser.postfix_expression_return);
		CsharpParser.cast_expression_return e = default(CsharpParser.cast_expression_return);

		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(150, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:151:2: (p= postfix_expression | ( '+' e= cast_expression | '-' e= cast_expression ) )
			int alt21=2;
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if (((LA21_1>=CHARACTER_LITERAL && LA21_1<=DECIMAL_LITERAL)||LA21_1==FLOATING_POINT_LITERAL||LA21_1==HEX_LITERAL||LA21_1==IDENTIFIER||(LA21_1>=STRING_LITERAL && LA21_1<=TIMESPAN_LITERAL)||LA21_1==27||(LA21_1>=46 && LA21_1<=48)))
			{
				alt21 = 1;
			}
			else if ((LA21_1==30||LA21_1==32))
			{
				alt21 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:151:4: p= postfix_expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(151, 5);
				PushFollow(Follow._postfix_expression_in_unary_expression878);
				p=postfix_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, p.Tree);
				DebugLocation(151, 25);
				if (state.backtracking == 0)
				{
					 retval.value = (p!=null?p.value:default(IAstNode)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:153:3: ( '+' e= cast_expression | '-' e= cast_expression )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(153, 3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:153:3: ( '+' e= cast_expression | '-' e= cast_expression )
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==30))
				{
					alt20 = 1;
				}
				else if ((LA20_1==32))
				{
					alt20 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:153:5: '+' e= cast_expression
					{
					DebugLocation(153, 5);
					char_literal31=(CommonToken)Match(input,30,Follow._30_in_unary_expression889); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal31_tree = (CommonTree)adaptor.Create(char_literal31);
					adaptor.AddChild(root_0, char_literal31_tree);
					}
					DebugLocation(153, 10);
					PushFollow(Follow._cast_expression_in_unary_expression893);
					e=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(153, 27);
					if (state.backtracking == 0)
					{
						 retval.value = new UnaryExpression((e!=null?e.value:default(IAstNode)), ExpressionType.Plus); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:154:5: '-' e= cast_expression
					{
					DebugLocation(154, 5);
					char_literal32=(CommonToken)Match(input,32,Follow._32_in_unary_expression901); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal32_tree = (CommonTree)adaptor.Create(char_literal32);
					adaptor.AddChild(root_0, char_literal32_tree);
					}
					DebugLocation(154, 10);
					PushFollow(Follow._cast_expression_in_unary_expression905);
					e=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(154, 27);
					if (state.backtracking == 0)
					{
						 retval.value = new UnaryExpression((e!=null?e.value:default(IAstNode)), ExpressionType.Minus); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("unary_expression", 18);
			LeaveRule("unary_expression", 18);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 18, unary_expression_StartIndex); }

		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	private sealed partial class argument_expression_list_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public AstNodeCollection value;
		public argument_expression_list_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();
	// $ANTLR start "argument_expression_list"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:158:1: argument_expression_list returns [AstNodeCollection value] : e= expression ( ',' e= expression )* ;
	[GrammarRule("argument_expression_list")]
	private CsharpParser.argument_expression_list_return argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 19);
		TraceIn("argument_expression_list", 19);
		CsharpParser.argument_expression_list_return retval = new CsharpParser.argument_expression_list_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int argument_expression_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal33 = default(CommonToken);
		CsharpParser.expression_return e = default(CsharpParser.expression_return);

		CommonTree char_literal33_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(158, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:159:2: (e= expression ( ',' e= expression )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:159:4: e= expression ( ',' e= expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(159, 5);
			PushFollow(Follow._expression_in_argument_expression_list928);
			e=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
			DebugLocation(159, 17);
			if (state.backtracking == 0)
			{
				 retval.value = new AstNodeCollection((e!=null?e.value:default(IAstNode))); 
			}
			DebugLocation(160, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:160:3: ( ',' e= expression )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==31))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:160:5: ',' e= expression
					{
					DebugLocation(160, 5);
					char_literal33=(CommonToken)Match(input,31,Follow._31_in_argument_expression_list936); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal33_tree = (CommonTree)adaptor.Create(char_literal33);
					adaptor.AddChild(root_0, char_literal33_tree);
					}
					DebugLocation(160, 10);
					PushFollow(Follow._expression_in_argument_expression_list940);
					e=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(160, 22);
					if (state.backtracking == 0)
					{
						 retval.value = new AstNodeCollection(retval.value, (e!=null?e.value:default(IAstNode))); 
					}

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("argument_expression_list", 19);
			LeaveRule("argument_expression_list", 19);
			LeaveRule_argument_expression_list();
			if (state.backtracking > 0) { Memoize(input, 19, argument_expression_list_StartIndex); }

		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"

	private sealed partial class postfix_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public postfix_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_postfix_expression();
	partial void LeaveRule_postfix_expression();
	// $ANTLR start "postfix_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:164:1: postfix_expression returns [IAstNode value] : p= primary_expression ( '[' e= argument_expression_list ']' | '(' ')' | '(' e= argument_expression_list ')' | DOT IDENTIFIER )* ;
	[GrammarRule("postfix_expression")]
	private CsharpParser.postfix_expression_return postfix_expression()
	{
		EnterRule_postfix_expression();
		EnterRule("postfix_expression", 20);
		TraceIn("postfix_expression", 20);
		CsharpParser.postfix_expression_return retval = new CsharpParser.postfix_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int postfix_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal34 = default(CommonToken);
		CommonToken char_literal35 = default(CommonToken);
		CommonToken char_literal36 = default(CommonToken);
		CommonToken char_literal37 = default(CommonToken);
		CommonToken char_literal38 = default(CommonToken);
		CommonToken char_literal39 = default(CommonToken);
		CommonToken DOT40 = default(CommonToken);
		CommonToken IDENTIFIER41 = default(CommonToken);
		CsharpParser.primary_expression_return p = default(CsharpParser.primary_expression_return);
		CsharpParser.argument_expression_list_return e = default(CsharpParser.argument_expression_list_return);

		CommonTree char_literal34_tree = default(CommonTree);
		CommonTree char_literal35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree DOT40_tree = default(CommonTree);
		CommonTree IDENTIFIER41_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "postfix_expression");
		DebugLocation(164, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:165:2: (p= primary_expression ( '[' e= argument_expression_list ']' | '(' ')' | '(' e= argument_expression_list ')' | DOT IDENTIFIER )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:165:4: p= primary_expression ( '[' e= argument_expression_list ']' | '(' ')' | '(' e= argument_expression_list ')' | DOT IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(165, 5);
			PushFollow(Follow._primary_expression_in_postfix_expression964);
			p=primary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, p.Tree);
			DebugLocation(165, 25);
			if (state.backtracking == 0)
			{
				 retval.value = (p!=null?p.value:default(IAstNode)); 
			}
			DebugLocation(166, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:166:3: ( '[' e= argument_expression_list ']' | '(' ')' | '(' e= argument_expression_list ')' | DOT IDENTIFIER )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=5;
				try { DebugEnterDecision(23, false);
				switch (input.LA(1))
				{
				case 43:
					{
					alt23 = 1;
					}
					break;
				case 27:
					{
					int LA23_2 = input.LA(2);

					if ((LA23_2==28))
					{
						alt23 = 2;
					}
					else if (((LA23_2>=CHARACTER_LITERAL && LA23_2<=DECIMAL_LITERAL)||LA23_2==FLOATING_POINT_LITERAL||LA23_2==HEX_LITERAL||LA23_2==IDENTIFIER||(LA23_2>=STRING_LITERAL && LA23_2<=TIMESPAN_LITERAL)||LA23_2==22||LA23_2==27||LA23_2==30||LA23_2==32||(LA23_2>=46 && LA23_2<=48)||LA23_2==51))
					{
						alt23 = 3;
					}


					}
					break;
				case DOT:
					{
					alt23 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:166:5: '[' e= argument_expression_list ']'
					{
					DebugLocation(166, 5);
					char_literal34=(CommonToken)Match(input,43,Follow._43_in_postfix_expression972); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal34_tree = (CommonTree)adaptor.Create(char_literal34);
					adaptor.AddChild(root_0, char_literal34_tree);
					}
					DebugLocation(166, 10);
					PushFollow(Follow._argument_expression_list_in_postfix_expression976);
					e=argument_expression_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(166, 36);
					char_literal35=(CommonToken)Match(input,44,Follow._44_in_postfix_expression978); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal35_tree = (CommonTree)adaptor.Create(char_literal35);
					adaptor.AddChild(root_0, char_literal35_tree);
					}
					DebugLocation(166, 40);
					if (state.backtracking == 0)
					{
						 retval.value = new Index(retval.value, (e!=null?e.value:default(AstNodeCollection))); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:167:5: '(' ')'
					{
					DebugLocation(167, 5);
					char_literal36=(CommonToken)Match(input,27,Follow._27_in_postfix_expression986); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal36_tree = (CommonTree)adaptor.Create(char_literal36);
					adaptor.AddChild(root_0, char_literal36_tree);
					}
					DebugLocation(167, 9);
					char_literal37=(CommonToken)Match(input,28,Follow._28_in_postfix_expression988); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal37_tree = (CommonTree)adaptor.Create(char_literal37);
					adaptor.AddChild(root_0, char_literal37_tree);
					}
					DebugLocation(167, 13);
					if (state.backtracking == 0)
					{
						 retval.value = new MethodCall(retval.value); 
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:168:5: '(' e= argument_expression_list ')'
					{
					DebugLocation(168, 5);
					char_literal38=(CommonToken)Match(input,27,Follow._27_in_postfix_expression996); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal38_tree = (CommonTree)adaptor.Create(char_literal38);
					adaptor.AddChild(root_0, char_literal38_tree);
					}
					DebugLocation(168, 10);
					PushFollow(Follow._argument_expression_list_in_postfix_expression1000);
					e=argument_expression_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
					DebugLocation(168, 36);
					char_literal39=(CommonToken)Match(input,28,Follow._28_in_postfix_expression1002); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal39_tree = (CommonTree)adaptor.Create(char_literal39);
					adaptor.AddChild(root_0, char_literal39_tree);
					}
					DebugLocation(168, 40);
					if (state.backtracking == 0)
					{
						 retval.value = new MethodCall(retval.value, (e!=null?e.value:default(AstNodeCollection))); 
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:169:5: DOT IDENTIFIER
					{
					DebugLocation(169, 5);
					DOT40=(CommonToken)Match(input,DOT,Follow._DOT_in_postfix_expression1010); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DOT40_tree = (CommonTree)adaptor.Create(DOT40);
					adaptor.AddChild(root_0, DOT40_tree);
					}
					DebugLocation(169, 9);
					IDENTIFIER41=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1012); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER41_tree = (CommonTree)adaptor.Create(IDENTIFIER41);
					adaptor.AddChild(root_0, IDENTIFIER41_tree);
					}
					DebugLocation(169, 20);
					if (state.backtracking == 0)
					{
						 retval.value = new MemberAccess(retval.value, (IDENTIFIER41!=null?IDENTIFIER41.Text:null)); 
					}

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("postfix_expression", 20);
			LeaveRule("postfix_expression", 20);
			LeaveRule_postfix_expression();
			if (state.backtracking > 0) { Memoize(input, 20, postfix_expression_StartIndex); }

		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "postfix_expression"); }
		return retval;

	}
	// $ANTLR end "postfix_expression"

	private sealed partial class primary_expression_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public IAstNode value;
		public primary_expression_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();
	// $ANTLR start "primary_expression"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:173:1: primary_expression returns [IAstNode value] : ( IDENTIFIER | constant | '(' expression ')' );
	[GrammarRule("primary_expression")]
	private CsharpParser.primary_expression_return primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 21);
		TraceIn("primary_expression", 21);
		CsharpParser.primary_expression_return retval = new CsharpParser.primary_expression_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER42 = default(CommonToken);
		CommonToken char_literal44 = default(CommonToken);
		CommonToken char_literal46 = default(CommonToken);
		CsharpParser.constant_return constant43 = default(CsharpParser.constant_return);
		CsharpParser.expression_return expression45 = default(CsharpParser.expression_return);

		CommonTree IDENTIFIER42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(173, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:174:2: ( IDENTIFIER | constant | '(' expression ')' )
			int alt24=3;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt24 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DATETIME_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case STRING_LITERAL:
			case TIMESPAN_LITERAL:
			case 46:
			case 47:
			case 48:
				{
				alt24 = 2;
				}
				break;
			case 27:
				{
				alt24 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:174:4: IDENTIFIER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(174, 4);
				IDENTIFIER42=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary_expression1034); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER42_tree = (CommonTree)adaptor.Create(IDENTIFIER42);
				adaptor.AddChild(root_0, IDENTIFIER42_tree);
				}
				DebugLocation(174, 15);
				if (state.backtracking == 0)
				{
					 retval.value = CreateIdentifier((IDENTIFIER42!=null?IDENTIFIER42.Text:null)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:175:4: constant
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 4);
				PushFollow(Follow._constant_in_primary_expression1041);
				constant43=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant43.Tree);
				DebugLocation(175, 13);
				if (state.backtracking == 0)
				{
					 retval.value = (constant43!=null?constant43.value:default(Constant)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:176:4: '(' expression ')'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				char_literal44=(CommonToken)Match(input,27,Follow._27_in_primary_expression1048); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal44_tree = (CommonTree)adaptor.Create(char_literal44);
				adaptor.AddChild(root_0, char_literal44_tree);
				}
				DebugLocation(176, 8);
				PushFollow(Follow._expression_in_primary_expression1050);
				expression45=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression45.Tree);
				DebugLocation(176, 19);
				char_literal46=(CommonToken)Match(input,28,Follow._28_in_primary_expression1052); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal46_tree = (CommonTree)adaptor.Create(char_literal46);
				adaptor.AddChild(root_0, char_literal46_tree);
				}
				DebugLocation(176, 23);
				if (state.backtracking == 0)
				{
					 retval.value = new UnaryExpression((expression45!=null?expression45.value:default(IAstNode)), ExpressionType.Group); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("primary_expression", 21);
			LeaveRule("primary_expression", 21);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 21, primary_expression_StartIndex); }

		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	private sealed partial class constant_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public Constant value;
		public constant_return(CsharpParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CsharpParser grammar);
	}

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:179:1: constant returns [Constant value] : ( 'true' | 'false' | 'null' | DATETIME_LITERAL | TIMESPAN_LITERAL | HEX_LITERAL | DECIMAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL );
	[GrammarRule("constant")]
	private CsharpParser.constant_return constant()
	{
		EnterRule_constant();
		EnterRule("constant", 22);
		TraceIn("constant", 22);
		CsharpParser.constant_return retval = new CsharpParser.constant_return(this);
		retval.Start = (CommonToken)input.LT(1);
		int constant_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal47 = default(CommonToken);
		CommonToken string_literal48 = default(CommonToken);
		CommonToken string_literal49 = default(CommonToken);
		CommonToken DATETIME_LITERAL50 = default(CommonToken);
		CommonToken TIMESPAN_LITERAL51 = default(CommonToken);
		CommonToken HEX_LITERAL52 = default(CommonToken);
		CommonToken DECIMAL_LITERAL53 = default(CommonToken);
		CommonToken CHARACTER_LITERAL54 = default(CommonToken);
		CommonToken STRING_LITERAL55 = default(CommonToken);
		CommonToken FLOATING_POINT_LITERAL56 = default(CommonToken);

		CommonTree string_literal47_tree = default(CommonTree);
		CommonTree string_literal48_tree = default(CommonTree);
		CommonTree string_literal49_tree = default(CommonTree);
		CommonTree DATETIME_LITERAL50_tree = default(CommonTree);
		CommonTree TIMESPAN_LITERAL51_tree = default(CommonTree);
		CommonTree HEX_LITERAL52_tree = default(CommonTree);
		CommonTree DECIMAL_LITERAL53_tree = default(CommonTree);
		CommonTree CHARACTER_LITERAL54_tree = default(CommonTree);
		CommonTree STRING_LITERAL55_tree = default(CommonTree);
		CommonTree FLOATING_POINT_LITERAL56_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(179, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:180:2: ( 'true' | 'false' | 'null' | DATETIME_LITERAL | TIMESPAN_LITERAL | HEX_LITERAL | DECIMAL_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL )
			int alt25=10;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case 48:
				{
				alt25 = 1;
				}
				break;
			case 46:
				{
				alt25 = 2;
				}
				break;
			case 47:
				{
				alt25 = 3;
				}
				break;
			case DATETIME_LITERAL:
				{
				alt25 = 4;
				}
				break;
			case TIMESPAN_LITERAL:
				{
				alt25 = 5;
				}
				break;
			case HEX_LITERAL:
				{
				alt25 = 6;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt25 = 7;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt25 = 8;
				}
				break;
			case STRING_LITERAL:
				{
				alt25 = 9;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt25 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:180:4: 'true'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				string_literal47=(CommonToken)Match(input,48,Follow._48_in_constant1069); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal47_tree = (CommonTree)adaptor.Create(string_literal47);
				adaptor.AddChild(root_0, string_literal47_tree);
				}
				DebugLocation(180, 11);
				if (state.backtracking == 0)
				{
					 retval.value = Constant.True; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:181:4: 'false'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				string_literal48=(CommonToken)Match(input,46,Follow._46_in_constant1076); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal48_tree = (CommonTree)adaptor.Create(string_literal48);
				adaptor.AddChild(root_0, string_literal48_tree);
				}
				DebugLocation(181, 12);
				if (state.backtracking == 0)
				{
					 retval.value = Constant.False; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:182:4: 'null'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 4);
				string_literal49=(CommonToken)Match(input,47,Follow._47_in_constant1083); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal49_tree = (CommonTree)adaptor.Create(string_literal49);
				adaptor.AddChild(root_0, string_literal49_tree);
				}
				DebugLocation(182, 11);
				if (state.backtracking == 0)
				{
					 retval.value = Constant.Null; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:183:4: DATETIME_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 4);
				DATETIME_LITERAL50=(CommonToken)Match(input,DATETIME_LITERAL,Follow._DATETIME_LITERAL_in_constant1090); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DATETIME_LITERAL50_tree = (CommonTree)adaptor.Create(DATETIME_LITERAL50);
				adaptor.AddChild(root_0, DATETIME_LITERAL50_tree);
				}
				DebugLocation(183, 21);
				if (state.backtracking == 0)
				{
					 retval.value = ParseDateTime((DATETIME_LITERAL50!=null?DATETIME_LITERAL50.Text:null)); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:184:4: TIMESPAN_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				TIMESPAN_LITERAL51=(CommonToken)Match(input,TIMESPAN_LITERAL,Follow._TIMESPAN_LITERAL_in_constant1097); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TIMESPAN_LITERAL51_tree = (CommonTree)adaptor.Create(TIMESPAN_LITERAL51);
				adaptor.AddChild(root_0, TIMESPAN_LITERAL51_tree);
				}
				DebugLocation(184, 21);
				if (state.backtracking == 0)
				{
					 retval.value = ParseTimeSpan((TIMESPAN_LITERAL51!=null?TIMESPAN_LITERAL51.Text:null)); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:185:4: HEX_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				HEX_LITERAL52=(CommonToken)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_constant1104); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HEX_LITERAL52_tree = (CommonTree)adaptor.Create(HEX_LITERAL52);
				adaptor.AddChild(root_0, HEX_LITERAL52_tree);
				}
				DebugLocation(185, 16);
				if (state.backtracking == 0)
				{
					 retval.value = ParseHex((HEX_LITERAL52!=null?HEX_LITERAL52.Text:null)); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:186:4: DECIMAL_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				DECIMAL_LITERAL53=(CommonToken)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_constant1111); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DECIMAL_LITERAL53_tree = (CommonTree)adaptor.Create(DECIMAL_LITERAL53);
				adaptor.AddChild(root_0, DECIMAL_LITERAL53_tree);
				}
				DebugLocation(186, 20);
				if (state.backtracking == 0)
				{
					 retval.value = ParseDecimal((DECIMAL_LITERAL53!=null?DECIMAL_LITERAL53.Text:null)); 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:187:4: CHARACTER_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				CHARACTER_LITERAL54=(CommonToken)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_constant1118); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CHARACTER_LITERAL54_tree = (CommonTree)adaptor.Create(CHARACTER_LITERAL54);
				adaptor.AddChild(root_0, CHARACTER_LITERAL54_tree);
				}
				DebugLocation(187, 22);
				if (state.backtracking == 0)
				{
					 retval.value = ParseCharacter((CHARACTER_LITERAL54!=null?CHARACTER_LITERAL54.Text:null)); 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:188:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				STRING_LITERAL55=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_constant1125); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL55_tree = (CommonTree)adaptor.Create(STRING_LITERAL55);
				adaptor.AddChild(root_0, STRING_LITERAL55_tree);
				}
				DebugLocation(188, 19);
				if (state.backtracking == 0)
				{
					 retval.value = ParseString((STRING_LITERAL55!=null?STRING_LITERAL55.Text:null)); 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:189:4: FLOATING_POINT_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 4);
				FLOATING_POINT_LITERAL56=(CommonToken)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_constant1132); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FLOATING_POINT_LITERAL56_tree = (CommonTree)adaptor.Create(FLOATING_POINT_LITERAL56);
				adaptor.AddChild(root_0, FLOATING_POINT_LITERAL56_tree);
				}
				DebugLocation(189, 27);
				if (state.backtracking == 0)
				{
					 retval.value = ParseFloatingPoint((FLOATING_POINT_LITERAL56!=null?FLOATING_POINT_LITERAL56.Text:null)); 
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		    catch (RecognitionException) 
		    {
		        throw;
		    }

		finally
		{
			TraceOut("constant", 22);
			LeaveRule("constant", 22);
			LeaveRule_constant();
			if (state.backtracking > 0) { Memoize(input, 22, constant_StartIndex); }

		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_synpred22_Csharp_fragment();
	partial void LeaveRule_synpred22_Csharp_fragment();

	// $ANTLR start synpred22_Csharp
	public void synpred22_Csharp_fragment()
	{
		CsharpParser.type_expression_return t = default(CsharpParser.type_expression_return);
		CsharpParser.cast_expression_return e = default(CsharpParser.cast_expression_return);

		EnterRule_synpred22_Csharp_fragment();
		EnterRule("synpred22_Csharp_fragment", 44);
		TraceIn("synpred22_Csharp_fragment", 44);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:132:4: ( '(' t= type_expression ')' e= cast_expression )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:132:4: '(' t= type_expression ')' e= cast_expression
			{
			DebugLocation(132, 4);
			Match(input,27,Follow._27_in_synpred22_Csharp751); if (state.failed) return;
			DebugLocation(132, 9);
			PushFollow(Follow._type_expression_in_synpred22_Csharp755);
			t=type_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(132, 26);
			Match(input,28,Follow._28_in_synpred22_Csharp757); if (state.failed) return;
			DebugLocation(132, 31);
			PushFollow(Follow._cast_expression_in_synpred22_Csharp761);
			e=cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred22_Csharp_fragment", 44);
			LeaveRule("synpred22_Csharp_fragment", 44);
			LeaveRule_synpred22_Csharp_fragment();
		}
	}
	// $ANTLR end synpred22_Csharp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _expression_in_prog115 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_prog119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_expression136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression155 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _42_in_conditional_expression163 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _expression_in_conditional_expression167 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_conditional_expression169 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _expression_in_conditional_expression173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression197 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _50_in_logical_or_expression205 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression209 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _bitwise_or_expression_in_logical_and_expression237 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _25_in_logical_and_expression245 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _bitwise_or_expression_in_logical_and_expression249 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _bitwise_xor_expression_in_bitwise_or_expression278 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _49_in_bitwise_or_expression286 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _bitwise_xor_expression_in_bitwise_or_expression290 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _bitwise_and_expression_in_bitwise_xor_expression319 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _45_in_bitwise_xor_expression327 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _bitwise_and_expression_in_bitwise_xor_expression331 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _unary_not_expression_in_bitwise_and_expression361 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _26_in_bitwise_and_expression369 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _unary_not_expression_in_bitwise_and_expression373 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _equality_expression_in_unary_not_expression401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _22_in_unary_not_expression408 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _unary_not_expression_in_unary_not_expression412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_unary_not_expression419 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _unary_not_expression_in_unary_not_expression423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relational_expression_in_equality_expression442 = new BitSet(new ulong[]{0x4000800002UL});
		public static readonly BitSet _38_in_equality_expression455 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _relational_expression_in_equality_expression459 = new BitSet(new ulong[]{0x4000800002UL});
		public static readonly BitSet _23_in_equality_expression468 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _relational_expression_in_equality_expression472 = new BitSet(new ulong[]{0x4000800002UL});
		public static readonly BitSet _shift_expression_in_relational_expression501 = new BitSet(new ulong[]{0x1A800000002UL});
		public static readonly BitSet _35_in_relational_expression514 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _shift_expression_in_relational_expression518 = new BitSet(new ulong[]{0x1A800000002UL});
		public static readonly BitSet _39_in_relational_expression527 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _shift_expression_in_relational_expression531 = new BitSet(new ulong[]{0x1A800000002UL});
		public static readonly BitSet _37_in_relational_expression540 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _shift_expression_in_relational_expression544 = new BitSet(new ulong[]{0x1A800000002UL});
		public static readonly BitSet _40_in_relational_expression553 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _shift_expression_in_relational_expression557 = new BitSet(new ulong[]{0x1A800000002UL});
		public static readonly BitSet _additive_expression_in_shift_expression586 = new BitSet(new ulong[]{0x21000000002UL});
		public static readonly BitSet _36_in_shift_expression599 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _additive_expression_in_shift_expression603 = new BitSet(new ulong[]{0x21000000002UL});
		public static readonly BitSet _41_in_shift_expression612 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _additive_expression_in_shift_expression616 = new BitSet(new ulong[]{0x21000000002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression645 = new BitSet(new ulong[]{0x140000002UL});
		public static readonly BitSet _30_in_additive_expression653 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression657 = new BitSet(new ulong[]{0x140000002UL});
		public static readonly BitSet _32_in_additive_expression665 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression669 = new BitSet(new ulong[]{0x140000002UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression693 = new BitSet(new ulong[]{0x221000002UL});
		public static readonly BitSet _29_in_multiplicative_expression701 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression705 = new BitSet(new ulong[]{0x221000002UL});
		public static readonly BitSet _33_in_multiplicative_expression713 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression717 = new BitSet(new ulong[]{0x221000002UL});
		public static readonly BitSet _24_in_multiplicative_expression725 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression729 = new BitSet(new ulong[]{0x221000002UL});
		public static readonly BitSet _27_in_cast_expression751 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _type_expression_in_cast_expression755 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_cast_expression757 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _cast_expression_in_cast_expression761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_cast_expression770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_identifier_in_type_expression789 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _43_in_type_expression800 = new BitSet(new ulong[]{0x100080000000UL});
		public static readonly BitSet _31_in_type_expression810 = new BitSet(new ulong[]{0x100080000000UL});
		public static readonly BitSet _44_in_type_expression824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_type_identifier846 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _DOT_in_type_identifier852 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENTIFIER_in_type_identifier856 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _postfix_expression_in_unary_expression878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_unary_expression889 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _cast_expression_in_unary_expression893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_unary_expression901 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _cast_expression_in_unary_expression905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_argument_expression_list928 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_argument_expression_list936 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _expression_in_argument_expression_list940 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _primary_expression_in_postfix_expression964 = new BitSet(new ulong[]{0x80008000082UL});
		public static readonly BitSet _43_in_postfix_expression972 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression976 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_postfix_expression978 = new BitSet(new ulong[]{0x80008000082UL});
		public static readonly BitSet _27_in_postfix_expression986 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_postfix_expression988 = new BitSet(new ulong[]{0x80008000082UL});
		public static readonly BitSet _27_in_postfix_expression996 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression1000 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_postfix_expression1002 = new BitSet(new ulong[]{0x80008000082UL});
		public static readonly BitSet _DOT_in_postfix_expression1010 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1012 = new BitSet(new ulong[]{0x80008000082UL});
		public static readonly BitSet _IDENTIFIER_in_primary_expression1034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression1041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_primary_expression1048 = new BitSet(new ulong[]{0x9C001484CA870UL});
		public static readonly BitSet _expression_in_primary_expression1050 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_primary_expression1052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_constant1069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_constant1076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_constant1083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_LITERAL_in_constant1090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TIMESPAN_LITERAL_in_constant1097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_LITERAL_in_constant1104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_constant1111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_constant1118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_constant1125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_constant1132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_synpred22_Csharp751 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _type_expression_in_synpred22_Csharp755 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_synpred22_Csharp757 = new BitSet(new ulong[]{0x1C001480CA870UL});
		public static readonly BitSet _cast_expression_in_synpred22_Csharp761 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Expressions.Csharp 
