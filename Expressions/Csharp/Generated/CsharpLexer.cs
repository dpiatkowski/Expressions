//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g 2019-10-05 18:10:28

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Expressions.Csharp 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
 internal  partial class CsharpLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int CHARACTER_LITERAL=4;
	public const int DATETIME_LITERAL=5;
	public const int DECIMAL_LITERAL=6;
	public const int DOT=7;
	public const int Digits=8;
	public const int EscapeSequence=9;
	public const int Exponent=10;
	public const int FLOATING_POINT_LITERAL=11;
	public const int FloatTypeSuffix=12;
	public const int HEX_LITERAL=13;
	public const int HexDigit=14;
	public const int IDENTIFIER=15;
	public const int LETTER=16;
	public const int NumericTypeSuffix=17;
	public const int STRING_LITERAL=18;
	public const int TIMESPAN_LITERAL=19;
	public const int UnicodeEscape=20;
	public const int WS=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;

    // delegates
    // delegators

	public CsharpLexer()
	{
		OnCreated();
	}

	public CsharpLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public CsharpLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 1);
		TraceIn("T__22", 1);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:11:7: ( '!' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:11:9: '!'
			{
			DebugLocation(11, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 1);
			LeaveRule("T__22", 1);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 2);
		TraceIn("T__23", 2);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:12:7: ( '!=' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:12:9: '!='
			{
			DebugLocation(12, 9);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 2);
			LeaveRule("T__23", 2);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 3);
		TraceIn("T__24", 3);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:13:7: ( '%' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:13:9: '%'
			{
			DebugLocation(13, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 3);
			LeaveRule("T__24", 3);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 4);
		TraceIn("T__25", 4);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:14:7: ( '&&' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:14:9: '&&'
			{
			DebugLocation(14, 9);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 4);
			LeaveRule("T__25", 4);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 5);
		TraceIn("T__26", 5);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:15:7: ( '&' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:15:9: '&'
			{
			DebugLocation(15, 9);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 5);
			LeaveRule("T__26", 5);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 6);
		TraceIn("T__27", 6);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:16:7: ( '(' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:16:9: '('
			{
			DebugLocation(16, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 6);
			LeaveRule("T__27", 6);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 7);
		TraceIn("T__28", 7);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:17:7: ( ')' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:17:9: ')'
			{
			DebugLocation(17, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 7);
			LeaveRule("T__28", 7);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 8);
		TraceIn("T__29", 8);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:18:7: ( '*' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:18:9: '*'
			{
			DebugLocation(18, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 8);
			LeaveRule("T__29", 8);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 9);
		TraceIn("T__30", 9);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:19:7: ( '+' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:19:9: '+'
			{
			DebugLocation(19, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 9);
			LeaveRule("T__30", 9);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 10);
		TraceIn("T__31", 10);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:20:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:20:9: ','
			{
			DebugLocation(20, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 10);
			LeaveRule("T__31", 10);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 11);
		TraceIn("T__32", 11);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:21:7: ( '-' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:21:9: '-'
			{
			DebugLocation(21, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 11);
			LeaveRule("T__32", 11);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 12);
		TraceIn("T__33", 12);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:22:7: ( '/' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:22:9: '/'
			{
			DebugLocation(22, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 12);
			LeaveRule("T__33", 12);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 13);
		TraceIn("T__34", 13);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:23:7: ( ':' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:23:9: ':'
			{
			DebugLocation(23, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 13);
			LeaveRule("T__34", 13);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 14);
		TraceIn("T__35", 14);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:24:7: ( '<' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:24:9: '<'
			{
			DebugLocation(24, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 14);
			LeaveRule("T__35", 14);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 15);
		TraceIn("T__36", 15);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:25:7: ( '<<' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:25:9: '<<'
			{
			DebugLocation(25, 9);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 15);
			LeaveRule("T__36", 15);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 16);
		TraceIn("T__37", 16);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:26:7: ( '<=' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:26:9: '<='
			{
			DebugLocation(26, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 16);
			LeaveRule("T__37", 16);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 17);
		TraceIn("T__38", 17);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:27:7: ( '==' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:27:9: '=='
			{
			DebugLocation(27, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 17);
			LeaveRule("T__38", 17);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 18);
		TraceIn("T__39", 18);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:28:7: ( '>' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:28:9: '>'
			{
			DebugLocation(28, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 18);
			LeaveRule("T__39", 18);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 19);
		TraceIn("T__40", 19);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:29:7: ( '>=' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:29:9: '>='
			{
			DebugLocation(29, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 19);
			LeaveRule("T__40", 19);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 20);
		TraceIn("T__41", 20);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:30:7: ( '>>' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:30:9: '>>'
			{
			DebugLocation(30, 9);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 20);
			LeaveRule("T__41", 20);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 21);
		TraceIn("T__42", 21);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:31:7: ( '?' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:31:9: '?'
			{
			DebugLocation(31, 9);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 21);
			LeaveRule("T__42", 21);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 22);
		TraceIn("T__43", 22);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:32:7: ( '[' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:32:9: '['
			{
			DebugLocation(32, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 22);
			LeaveRule("T__43", 22);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 23);
		TraceIn("T__44", 23);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:33:7: ( ']' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:33:9: ']'
			{
			DebugLocation(33, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 23);
			LeaveRule("T__44", 23);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 24);
		TraceIn("T__45", 24);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:34:7: ( '^' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:34:9: '^'
			{
			DebugLocation(34, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 24);
			LeaveRule("T__45", 24);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 25);
		TraceIn("T__46", 25);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:35:7: ( 'false' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:35:9: 'false'
			{
			DebugLocation(35, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 25);
			LeaveRule("T__46", 25);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 26);
		TraceIn("T__47", 26);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:36:7: ( 'null' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:36:9: 'null'
			{
			DebugLocation(36, 9);
			Match("null"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 26);
			LeaveRule("T__47", 26);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 27);
		TraceIn("T__48", 27);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:37:7: ( 'true' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:37:9: 'true'
			{
			DebugLocation(37, 9);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 27);
			LeaveRule("T__48", 27);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 28);
		TraceIn("T__49", 28);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:38:7: ( '|' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:38:9: '|'
			{
			DebugLocation(38, 9);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 28);
			LeaveRule("T__49", 28);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 29);
		TraceIn("T__50", 29);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:39:7: ( '||' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:39:9: '||'
			{
			DebugLocation(39, 9);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 29);
			LeaveRule("T__50", 29);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 30);
		TraceIn("T__51", 30);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:40:7: ( '~' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:40:9: '~'
			{
			DebugLocation(40, 9);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 30);
			LeaveRule("T__51", 30);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 31);
		TraceIn("DOT", 31);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:193:2: ()
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:194:2: 
			{
			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 31);
			LeaveRule("DOT", 31);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_CHARACTER_LITERAL();
	partial void LeaveRule_CHARACTER_LITERAL();

	// $ANTLR start "CHARACTER_LITERAL"
	[GrammarRule("CHARACTER_LITERAL")]
	private void mCHARACTER_LITERAL()
	{
		EnterRule_CHARACTER_LITERAL();
		EnterRule("CHARACTER_LITERAL", 32);
		TraceIn("CHARACTER_LITERAL", 32);
		try
		{
			int _type = CHARACTER_LITERAL;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:197:2: ( '\\'' (~ ( '\\\\' | '\\'' ) | EscapeSequence ) '\\'' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:197:4: '\\'' (~ ( '\\\\' | '\\'' ) | EscapeSequence ) '\\''
			{
			DebugLocation(197, 4);
			Match('\''); 
			DebugLocation(197, 9);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:197:9: (~ ( '\\\\' | '\\'' ) | EscapeSequence )
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if (((LA1_1>='\u0000' && LA1_1<='&')||(LA1_1>='(' && LA1_1<='[')||(LA1_1>=']' && LA1_1<='\uFFFF')))
			{
				alt1 = 1;
			}
			else if ((LA1_1=='\\'))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:197:11: ~ ( '\\\\' | '\\'' )
				{
				DebugLocation(197, 11);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:197:26: EscapeSequence
				{
				DebugLocation(197, 26);
				mEscapeSequence(); 

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(197, 43);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHARACTER_LITERAL", 32);
			LeaveRule("CHARACTER_LITERAL", 32);
			LeaveRule_CHARACTER_LITERAL();
		}
	}
	// $ANTLR end "CHARACTER_LITERAL"

	partial void EnterRule_TIMESPAN_LITERAL();
	partial void LeaveRule_TIMESPAN_LITERAL();

	// $ANTLR start "TIMESPAN_LITERAL"
	[GrammarRule("TIMESPAN_LITERAL")]
	private void mTIMESPAN_LITERAL()
	{
		EnterRule_TIMESPAN_LITERAL();
		EnterRule("TIMESPAN_LITERAL", 33);
		TraceIn("TIMESPAN_LITERAL", 33);
		try
		{
			int _type = TIMESPAN_LITERAL;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:201:2: ( '#' '#' (~ '#' )* '#' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:201:4: '#' '#' (~ '#' )* '#'
			{
			DebugLocation(201, 4);
			Match('#'); 
			DebugLocation(201, 8);
			Match('#'); 
			DebugLocation(201, 12);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:201:12: (~ '#' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='\u0000' && LA2_1<='\"')||(LA2_1>='$' && LA2_1<='\uFFFF')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
					{
					DebugLocation(201, 12);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(201, 22);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TIMESPAN_LITERAL", 33);
			LeaveRule("TIMESPAN_LITERAL", 33);
			LeaveRule_TIMESPAN_LITERAL();
		}
	}
	// $ANTLR end "TIMESPAN_LITERAL"

	partial void EnterRule_DATETIME_LITERAL();
	partial void LeaveRule_DATETIME_LITERAL();

	// $ANTLR start "DATETIME_LITERAL"
	[GrammarRule("DATETIME_LITERAL")]
	private void mDATETIME_LITERAL()
	{
		EnterRule_DATETIME_LITERAL();
		EnterRule("DATETIME_LITERAL", 34);
		TraceIn("DATETIME_LITERAL", 34);
		try
		{
			int _type = DATETIME_LITERAL;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:205:2: ( '#' (~ '#' )* '#' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:205:4: '#' (~ '#' )* '#'
			{
			DebugLocation(205, 4);
			Match('#'); 
			DebugLocation(205, 8);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:205:8: (~ '#' )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='\u0000' && LA3_1<='\"')||(LA3_1>='$' && LA3_1<='\uFFFF')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
					{
					DebugLocation(205, 8);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(205, 18);
			Match('#'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DATETIME_LITERAL", 34);
			LeaveRule("DATETIME_LITERAL", 34);
			LeaveRule_DATETIME_LITERAL();
		}
	}
	// $ANTLR end "DATETIME_LITERAL"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 35);
		TraceIn("STRING_LITERAL", 35);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:209:2: ( '\"' (~ ( '\\\\' | '\"' ) | EscapeSequence )* '\"' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:209:5: '\"' (~ ( '\\\\' | '\"' ) | EscapeSequence )* '\"'
			{
			DebugLocation(209, 5);
			Match('\"'); 
			DebugLocation(209, 9);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:209:9: (~ ( '\\\\' | '\"' ) | EscapeSequence )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=3;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='\u0000' && LA4_1<='!')||(LA4_1>='#' && LA4_1<='[')||(LA4_1>=']' && LA4_1<='\uFFFF')))
				{
					alt4 = 1;
				}
				else if ((LA4_1=='\\'))
				{
					alt4 = 2;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:209:11: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(209, 11);
					input.Consume();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:209:25: EscapeSequence
					{
					DebugLocation(209, 25);
					mEscapeSequence(); 

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(209, 43);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 35);
			LeaveRule("STRING_LITERAL", 35);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_HEX_LITERAL();
	partial void LeaveRule_HEX_LITERAL();

	// $ANTLR start "HEX_LITERAL"
	[GrammarRule("HEX_LITERAL")]
	private void mHEX_LITERAL()
	{
		EnterRule_HEX_LITERAL();
		EnterRule("HEX_LITERAL", 36);
		TraceIn("HEX_LITERAL", 36);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:215:2: ()
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:216:2: 
			{
			}

		}
		finally
		{
			TraceOut("HEX_LITERAL", 36);
			LeaveRule("HEX_LITERAL", 36);
			LeaveRule_HEX_LITERAL();
		}
	}
	// $ANTLR end "HEX_LITERAL"

	partial void EnterRule_DECIMAL_LITERAL();
	partial void LeaveRule_DECIMAL_LITERAL();

	// $ANTLR start "DECIMAL_LITERAL"
	[GrammarRule("DECIMAL_LITERAL")]
	private void mDECIMAL_LITERAL()
	{
		EnterRule_DECIMAL_LITERAL();
		EnterRule("DECIMAL_LITERAL", 37);
		TraceIn("DECIMAL_LITERAL", 37);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:220:2: ()
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:221:2: 
			{
			}

		}
		finally
		{
			TraceOut("DECIMAL_LITERAL", 37);
			LeaveRule("DECIMAL_LITERAL", 37);
			LeaveRule_DECIMAL_LITERAL();
		}
	}
	// $ANTLR end "DECIMAL_LITERAL"

	partial void EnterRule_HexDigit();
	partial void LeaveRule_HexDigit();

	// $ANTLR start "HexDigit"
	[GrammarRule("HexDigit")]
	private void mHexDigit()
	{
		EnterRule_HexDigit();
		EnterRule("HexDigit", 38);
		TraceIn("HexDigit", 38);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:224:10: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
			{
			DebugLocation(224, 10);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HexDigit", 38);
			LeaveRule("HexDigit", 38);
			LeaveRule_HexDigit();
		}
	}
	// $ANTLR end "HexDigit"

	partial void EnterRule_FLOATING_POINT_LITERAL();
	partial void LeaveRule_FLOATING_POINT_LITERAL();

	// $ANTLR start "FLOATING_POINT_LITERAL"
	[GrammarRule("FLOATING_POINT_LITERAL")]
	private void mFLOATING_POINT_LITERAL()
	{
		EnterRule_FLOATING_POINT_LITERAL();
		EnterRule("FLOATING_POINT_LITERAL", 39);
		TraceIn("FLOATING_POINT_LITERAL", 39);
		try
		{
			int _type = FLOATING_POINT_LITERAL;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:226:2: ( ( '0' )+ ( ( 'x' | 'X' ) ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ ) |{...}? => '.' Digits ( Exponent )? ( FloatTypeSuffix )? | ( NumericTypeSuffix )? ) | ( '1' .. '9' ) ( Digits )? ({...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )? | Exponent ( FloatTypeSuffix )? | ( NumericTypeSuffix )? ) | '.' ( Digits ( Exponent )? ( FloatTypeSuffix )? |) )
			int alt21=3;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case '0':
				{
				alt21 = 1;
				}
				break;
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				alt21 = 2;
				}
				break;
			case '.':
				{
				alt21 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:227:3: ( '0' )+ ( ( 'x' | 'X' ) ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ ) |{...}? => '.' Digits ( Exponent )? ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				{
				DebugLocation(227, 3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:227:3: ( '0' )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1=='0'))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:227:3: '0'
						{
						DebugLocation(227, 3);
						Match('0'); 

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(228, 3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:228:3: ( ( 'x' | 'X' ) ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ ) |{...}? => '.' Digits ( Exponent )? ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				int alt10=3;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1=='X'||LA10_1=='x'))
				{
					alt10 = 1;
				}
				else if ((LA10_1=='.') && (( char.IsDigit((char)input.LA(2)) )))
				{
					alt10 = 2;
				}
				else
				{
					alt10 = 3;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:229:4: ( 'x' | 'X' ) ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ )
					{
					DebugLocation(229, 4);
					input.Consume();

					DebugLocation(229, 14);
					 _type = HEX_LITERAL; 
					DebugLocation(230, 4);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:230:4: ( ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+ )
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:231:5: ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+
					{
					DebugLocation(231, 5);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:231:5: ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )+
					int cnt6=0;
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_1 = input.LA(1);

						if (((LA6_1>='0' && LA6_1<='9')||(LA6_1>='A' && LA6_1<='Z')||(LA6_1>='a' && LA6_1<='z')))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch (alt6)
						{
						case 1:
							DebugEnterAlt(1);
							// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
							{
							DebugLocation(231, 5);
							input.Consume();


							}
							break;

						default:
							if (cnt6 >= 1)
								goto loop6;

							EarlyExitException eee6 = new EarlyExitException( 6, input );
							DebugRecognitionException(eee6);
							throw eee6;
						}
						cnt6++;
					}
					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(232, 5);
					 Text = Text.Substring(2); 

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:234:6: {...}? => '.' Digits ( Exponent )? ( FloatTypeSuffix )?
					{
					DebugLocation(234, 6);
					if (!(( char.IsDigit((char)input.LA(2)) )))
					{
						throw new FailedPredicateException(input, "FLOATING_POINT_LITERAL", " char.IsDigit((char)input.LA(2)) ");
					}
					DebugLocation(234, 46);
					Match('.'); 
					DebugLocation(234, 50);
					mDigits(); 
					DebugLocation(234, 57);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:234:57: ( Exponent )?
					int alt7=2;
					try { DebugEnterSubRule(7);
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1=='E'||LA7_1=='e'))
					{
						alt7 = 1;
					}
					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:234:57: Exponent
						{
						DebugLocation(234, 57);
						mExponent(); 

						}
						break;

					}
					} finally { DebugExitSubRule(7); }

					DebugLocation(234, 67);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:234:67: ( FloatTypeSuffix )?
					int alt8=2;
					try { DebugEnterSubRule(8);
					try { DebugEnterDecision(8, false);
					int LA8_1 = input.LA(1);

					if ((LA8_1=='D'||LA8_1=='F'||LA8_1=='M'||LA8_1=='d'||LA8_1=='f'||LA8_1=='m'))
					{
						alt8 = 1;
					}
					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
						{
						DebugLocation(234, 67);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(8); }

					DebugLocation(234, 84);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:235:6: ( NumericTypeSuffix )?
					{
					DebugLocation(235, 6);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:235:6: ( NumericTypeSuffix )?
					int alt9=2;
					try { DebugEnterSubRule(9);
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if ((LA9_1=='D'||LA9_1=='F'||(LA9_1>='L' && LA9_1<='M')||LA9_1=='U'||LA9_1=='d'||LA9_1=='f'||(LA9_1>='l' && LA9_1<='m')||LA9_1=='u'))
					{
						alt9 = 1;
					}
					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:235:6: NumericTypeSuffix
						{
						DebugLocation(235, 6);
						mNumericTypeSuffix(); 

						}
						break;

					}
					} finally { DebugExitSubRule(9); }

					DebugLocation(235, 25);
					 _type = DECIMAL_LITERAL; 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:237:4: ( '1' .. '9' ) ( Digits )? ({...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )? | Exponent ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				{
				DebugLocation(237, 4);
				input.Consume();

				DebugLocation(237, 15);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:237:15: ( Digits )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if (((LA11_1>='0' && LA11_1<='9')))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:237:15: Digits
					{
					DebugLocation(237, 15);
					mDigits(); 

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(238, 3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:238:3: ({...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )? | Exponent ( FloatTypeSuffix )? | ( NumericTypeSuffix )? )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1=='.') && (( char.IsDigit((char)input.LA(2)) )))
				{
					alt17 = 1;
				}
				else if ((LA17_1=='E'||LA17_1=='e'))
				{
					alt17 = 2;
				}
				else
				{
					alt17 = 3;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:238:5: {...}? => '.' ( Digits )? ( Exponent )? ( FloatTypeSuffix )?
					{
					DebugLocation(238, 5);
					if (!(( char.IsDigit((char)input.LA(2)) )))
					{
						throw new FailedPredicateException(input, "FLOATING_POINT_LITERAL", " char.IsDigit((char)input.LA(2)) ");
					}
					DebugLocation(238, 45);
					Match('.'); 
					DebugLocation(238, 49);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:238:49: ( Digits )?
					int alt12=2;
					try { DebugEnterSubRule(12);
					try { DebugEnterDecision(12, false);
					int LA12_1 = input.LA(1);

					if (((LA12_1>='0' && LA12_1<='9')))
					{
						alt12 = 1;
					}
					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:238:49: Digits
						{
						DebugLocation(238, 49);
						mDigits(); 

						}
						break;

					}
					} finally { DebugExitSubRule(12); }

					DebugLocation(238, 57);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:238:57: ( Exponent )?
					int alt13=2;
					try { DebugEnterSubRule(13);
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1=='E'||LA13_1=='e'))
					{
						alt13 = 1;
					}
					} finally { DebugExitDecision(13); }
					switch (alt13)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:238:57: Exponent
						{
						DebugLocation(238, 57);
						mExponent(); 

						}
						break;

					}
					} finally { DebugExitSubRule(13); }

					DebugLocation(238, 67);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:238:67: ( FloatTypeSuffix )?
					int alt14=2;
					try { DebugEnterSubRule(14);
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if ((LA14_1=='D'||LA14_1=='F'||LA14_1=='M'||LA14_1=='d'||LA14_1=='f'||LA14_1=='m'))
					{
						alt14 = 1;
					}
					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
						{
						DebugLocation(238, 67);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(14); }

					DebugLocation(238, 84);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:239:5: Exponent ( FloatTypeSuffix )?
					{
					DebugLocation(239, 5);
					mExponent(); 
					DebugLocation(239, 14);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:239:14: ( FloatTypeSuffix )?
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_1 = input.LA(1);

					if ((LA15_1=='D'||LA15_1=='F'||LA15_1=='M'||LA15_1=='d'||LA15_1=='f'||LA15_1=='m'))
					{
						alt15 = 1;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
						{
						DebugLocation(239, 14);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(239, 31);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:240:5: ( NumericTypeSuffix )?
					{
					DebugLocation(240, 5);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:240:5: ( NumericTypeSuffix )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_1 = input.LA(1);

					if ((LA16_1=='D'||LA16_1=='F'||(LA16_1>='L' && LA16_1<='M')||LA16_1=='U'||LA16_1=='d'||LA16_1=='f'||(LA16_1>='l' && LA16_1<='m')||LA16_1=='u'))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:240:5: NumericTypeSuffix
						{
						DebugLocation(240, 5);
						mNumericTypeSuffix(); 

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(240, 24);
					 _type = DECIMAL_LITERAL; 

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:243:3: '.' ( Digits ( Exponent )? ( FloatTypeSuffix )? |)
				{
				DebugLocation(243, 3);
				Match('.'); 
				DebugLocation(244, 3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:244:3: ( Digits ( Exponent )? ( FloatTypeSuffix )? |)
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if (((LA20_1>='0' && LA20_1<='9')))
				{
					alt20 = 1;
				}
				else
				{
					alt20 = 2;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:244:5: Digits ( Exponent )? ( FloatTypeSuffix )?
					{
					DebugLocation(244, 5);
					mDigits(); 
					DebugLocation(244, 12);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:244:12: ( Exponent )?
					int alt18=2;
					try { DebugEnterSubRule(18);
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if ((LA18_1=='E'||LA18_1=='e'))
					{
						alt18 = 1;
					}
					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:244:12: Exponent
						{
						DebugLocation(244, 12);
						mExponent(); 

						}
						break;

					}
					} finally { DebugExitSubRule(18); }

					DebugLocation(244, 22);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:244:22: ( FloatTypeSuffix )?
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, false);
					int LA19_1 = input.LA(1);

					if ((LA19_1=='D'||LA19_1=='F'||LA19_1=='M'||LA19_1=='d'||LA19_1=='f'||LA19_1=='m'))
					{
						alt19 = 1;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
						{
						DebugLocation(244, 22);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(244, 39);
					 _type = FLOATING_POINT_LITERAL; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:245:5: 
					{
					DebugLocation(245, 5);
					 _type = DOT; 

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOATING_POINT_LITERAL", 39);
			LeaveRule("FLOATING_POINT_LITERAL", 39);
			LeaveRule_FLOATING_POINT_LITERAL();
		}
	}
	// $ANTLR end "FLOATING_POINT_LITERAL"

	partial void EnterRule_Digits();
	partial void LeaveRule_Digits();

	// $ANTLR start "Digits"
	[GrammarRule("Digits")]
	private void mDigits()
	{
		EnterRule_Digits();
		EnterRule("Digits", 40);
		TraceIn("Digits", 40);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:253:2: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:253:6: ( '0' .. '9' )+
			{
			DebugLocation(253, 6);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:253:6: ( '0' .. '9' )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if (((LA22_1>='0' && LA22_1<='9')))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
					{
					DebugLocation(253, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

		}
		finally
		{
			TraceOut("Digits", 40);
			LeaveRule("Digits", 40);
			LeaveRule_Digits();
		}
	}
	// $ANTLR end "Digits"

	partial void EnterRule_Exponent();
	partial void LeaveRule_Exponent();

	// $ANTLR start "Exponent"
	[GrammarRule("Exponent")]
	private void mExponent()
	{
		EnterRule_Exponent();
		EnterRule("Exponent", 41);
		TraceIn("Exponent", 41);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:258:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( Digits |) )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:258:6: ( 'e' | 'E' ) ( '+' | '-' )? ( Digits |)
			{
			DebugLocation(258, 6);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(258, 16);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:258:16: ( '+' | '-' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1=='+'||LA23_1=='-'))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
				{
				DebugLocation(258, 16);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(259, 3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:259:3: ( Digits |)
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if (((LA24_1>='0' && LA24_1<='9')))
			{
				alt24 = 1;
			}
			else
			{
				alt24 = 2;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:259:5: Digits
				{
				DebugLocation(259, 5);
				mDigits(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:261:4: 
				{
				DebugLocation(261, 4);

								EmitErrorMessage("Malformed exponent");
								Text = "0.0";
							

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

		}
		finally
		{
			TraceOut("Exponent", 41);
			LeaveRule("Exponent", 41);
			LeaveRule_Exponent();
		}
	}
	// $ANTLR end "Exponent"

	partial void EnterRule_NumericTypeSuffix();
	partial void LeaveRule_NumericTypeSuffix();

	// $ANTLR start "NumericTypeSuffix"
	[GrammarRule("NumericTypeSuffix")]
	private void mNumericTypeSuffix()
	{
		EnterRule_NumericTypeSuffix();
		EnterRule("NumericTypeSuffix", 42);
		TraceIn("NumericTypeSuffix", 42);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:270:2: ( ( 'u' | 'U' ) ( 'l' | 'L' )? | ( 'l' | 'L' ) ( 'u' | 'U' )? | FloatTypeSuffix )
			int alt27=3;
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case 'U':
			case 'u':
				{
				alt27 = 1;
				}
				break;
			case 'L':
			case 'l':
				{
				alt27 = 2;
				}
				break;
			case 'D':
			case 'F':
			case 'M':
			case 'd':
			case 'f':
			case 'm':
				{
				alt27 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:270:4: ( 'u' | 'U' ) ( 'l' | 'L' )?
				{
				DebugLocation(270, 4);
				input.Consume();

				DebugLocation(270, 16);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:270:16: ( 'l' | 'L' )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1=='L'||LA25_1=='l'))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
					{
					DebugLocation(270, 16);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:271:4: ( 'l' | 'L' ) ( 'u' | 'U' )?
				{
				DebugLocation(271, 4);
				input.Consume();

				DebugLocation(271, 16);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:271:16: ( 'u' | 'U' )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1=='U'||LA26_1=='u'))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
					{
					DebugLocation(271, 16);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:272:4: FloatTypeSuffix
				{
				DebugLocation(272, 4);
				mFloatTypeSuffix(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("NumericTypeSuffix", 42);
			LeaveRule("NumericTypeSuffix", 42);
			LeaveRule_NumericTypeSuffix();
		}
	}
	// $ANTLR end "NumericTypeSuffix"

	partial void EnterRule_FloatTypeSuffix();
	partial void LeaveRule_FloatTypeSuffix();

	// $ANTLR start "FloatTypeSuffix"
	[GrammarRule("FloatTypeSuffix")]
	private void mFloatTypeSuffix()
	{
		EnterRule_FloatTypeSuffix();
		EnterRule("FloatTypeSuffix", 43);
		TraceIn("FloatTypeSuffix", 43);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:277:2: ( ( 'f' | 'F' | 'd' | 'D' | 'm' | 'M' ) )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
			{
			DebugLocation(277, 2);
			if (input.LA(1)=='D'||input.LA(1)=='F'||input.LA(1)=='M'||input.LA(1)=='d'||input.LA(1)=='f'||input.LA(1)=='m')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("FloatTypeSuffix", 43);
			LeaveRule("FloatTypeSuffix", 43);
			LeaveRule_FloatTypeSuffix();
		}
	}
	// $ANTLR end "FloatTypeSuffix"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 44);
		TraceIn("EscapeSequence", 44);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:282:2: ( '\\\\' ( 'B' | 'b' | 'T' | 't' | 'N' | 'n' | 'F' | 'f' | 'R' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UnicodeEscape )
			int alt28=2;
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1=='\\'))
			{
				int LA28_2 = input.LA(2);

				if ((LA28_2=='\"'||LA28_2=='\''||LA28_2=='B'||LA28_2=='F'||LA28_2=='N'||LA28_2=='R'||LA28_2=='T'||LA28_2=='\\'||LA28_2=='b'||LA28_2=='f'||LA28_2=='n'||LA28_2=='r'||LA28_2=='t'))
				{
					alt28 = 1;
				}
				else if ((LA28_2=='U'||LA28_2=='u'))
				{
					alt28 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:282:4: '\\\\' ( 'B' | 'b' | 'T' | 't' | 'N' | 'n' | 'F' | 'f' | 'R' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(282, 4);
				Match('\\'); 
				DebugLocation(282, 9);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:283:4: UnicodeEscape
				{
				DebugLocation(283, 4);
				mUnicodeEscape(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("EscapeSequence", 44);
			LeaveRule("EscapeSequence", 44);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_UnicodeEscape();
	partial void LeaveRule_UnicodeEscape();

	// $ANTLR start "UnicodeEscape"
	[GrammarRule("UnicodeEscape")]
	private void mUnicodeEscape()
	{
		EnterRule_UnicodeEscape();
		EnterRule("UnicodeEscape", 45);
		TraceIn("UnicodeEscape", 45);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:288:2: ( '\\\\' ( 'u' | 'U' ) HexDigit HexDigit HexDigit HexDigit )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:288:4: '\\\\' ( 'u' | 'U' ) HexDigit HexDigit HexDigit HexDigit
			{
			DebugLocation(288, 4);
			Match('\\'); 
			DebugLocation(288, 9);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(288, 19);
			mHexDigit(); 
			DebugLocation(288, 28);
			mHexDigit(); 
			DebugLocation(288, 37);
			mHexDigit(); 
			DebugLocation(288, 46);
			mHexDigit(); 

			}

		}
		finally
		{
			TraceOut("UnicodeEscape", 45);
			LeaveRule("UnicodeEscape", 45);
			LeaveRule_UnicodeEscape();
		}
	}
	// $ANTLR end "UnicodeEscape"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 46);
		TraceIn("IDENTIFIER", 46);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:291:2: ( LETTER ( LETTER | '0' .. '9' )* )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:291:4: LETTER ( LETTER | '0' .. '9' )*
			{
			DebugLocation(291, 4);
			mLETTER(); 
			DebugLocation(291, 11);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:291:11: ( LETTER | '0' .. '9' )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if (((LA29_1>='0' && LA29_1<='9')||(LA29_1>='A' && LA29_1<='Z')||LA29_1=='_'||(LA29_1>='a' && LA29_1<='z')))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
					{
					DebugLocation(291, 11);
					input.Consume();


					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 46);
			LeaveRule("IDENTIFIER", 46);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 47);
		TraceIn("LETTER", 47);
		try
		{
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:297:2: ( 'A' .. 'Z' | 'a' .. 'z' | '_' )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
			{
			DebugLocation(297, 2);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 47);
			LeaveRule("LETTER", 47);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 48);
		TraceIn("WS", 48);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:302:2: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:302:4: ( ' ' | '\\t' | '\\r' | '\\n' )+
			{
			DebugLocation(302, 4);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:302:4: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt30=0;
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if (((LA30_1>='\t' && LA30_1<='\n')||LA30_1=='\r'||LA30_1==' '))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:
					{
					DebugLocation(302, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt30 >= 1)
						goto loop30;

					EarlyExitException eee30 = new EarlyExitException( 30, input );
					DebugRecognitionException(eee30);
					throw eee30;
				}
				cnt30++;
			}
			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(303, 2);

			// This construct is to make ANTLRWorks happy.
			#if true
					Skip();
			#else
					_channel = HIDDEN;
			#endif
				

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 48);
			LeaveRule("WS", 48);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:8: ( T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | DOT | CHARACTER_LITERAL | TIMESPAN_LITERAL | DATETIME_LITERAL | STRING_LITERAL | FLOATING_POINT_LITERAL | IDENTIFIER | WS )
		int alt31=38;
		try { DebugEnterDecision(31, false);
		switch (input.LA(1))
		{
		case '!':
			{
			int LA31_2 = input.LA(2);

			if ((LA31_2=='='))
			{
				alt31 = 2;
			}
			else
			{
				alt31 = 1;
			}
			}
			break;
		case '%':
			{
			alt31 = 3;
			}
			break;
		case '&':
			{
			int LA31_2 = input.LA(2);

			if ((LA31_2=='&'))
			{
				alt31 = 4;
			}
			else
			{
				alt31 = 5;
			}
			}
			break;
		case '(':
			{
			alt31 = 6;
			}
			break;
		case ')':
			{
			alt31 = 7;
			}
			break;
		case '*':
			{
			alt31 = 8;
			}
			break;
		case '+':
			{
			alt31 = 9;
			}
			break;
		case ',':
			{
			alt31 = 10;
			}
			break;
		case '-':
			{
			alt31 = 11;
			}
			break;
		case '/':
			{
			alt31 = 12;
			}
			break;
		case ':':
			{
			alt31 = 13;
			}
			break;
		case '<':
			{
			switch (input.LA(2))
			{
			case '<':
				{
				alt31 = 15;
				}
				break;
			case '=':
				{
				alt31 = 16;
				}
				break;
			default:
				alt31=14;
				break;

			}

			}
			break;
		case '=':
			{
			alt31 = 17;
			}
			break;
		case '>':
			{
			switch (input.LA(2))
			{
			case '=':
				{
				alt31 = 19;
				}
				break;
			case '>':
				{
				alt31 = 20;
				}
				break;
			default:
				alt31=18;
				break;

			}

			}
			break;
		case '?':
			{
			alt31 = 21;
			}
			break;
		case '[':
			{
			alt31 = 22;
			}
			break;
		case ']':
			{
			alt31 = 23;
			}
			break;
		case '^':
			{
			alt31 = 24;
			}
			break;
		case 'f':
			{
			int LA31_2 = input.LA(2);

			if ((LA31_2=='a'))
			{
				int LA31_3 = input.LA(3);

				if ((LA31_3=='l'))
				{
					int LA31_4 = input.LA(4);

					if ((LA31_4=='s'))
					{
						int LA31_5 = input.LA(5);

						if ((LA31_5=='e'))
						{
							int LA31_6 = input.LA(6);

							if (((LA31_6>='0' && LA31_6<='9')||(LA31_6>='A' && LA31_6<='Z')||LA31_6=='_'||(LA31_6>='a' && LA31_6<='z')))
							{
								alt31 = 37;
							}
							else
							{
								alt31 = 25;
							}
						}
						else
						{
							alt31 = 37;
						}
					}
					else
					{
						alt31 = 37;
					}
				}
				else
				{
					alt31 = 37;
				}
			}
			else
			{
				alt31 = 37;
			}
			}
			break;
		case 'n':
			{
			int LA31_2 = input.LA(2);

			if ((LA31_2=='u'))
			{
				int LA31_3 = input.LA(3);

				if ((LA31_3=='l'))
				{
					int LA31_4 = input.LA(4);

					if ((LA31_4=='l'))
					{
						int LA31_5 = input.LA(5);

						if (((LA31_5>='0' && LA31_5<='9')||(LA31_5>='A' && LA31_5<='Z')||LA31_5=='_'||(LA31_5>='a' && LA31_5<='z')))
						{
							alt31 = 37;
						}
						else
						{
							alt31 = 26;
						}
					}
					else
					{
						alt31 = 37;
					}
				}
				else
				{
					alt31 = 37;
				}
			}
			else
			{
				alt31 = 37;
			}
			}
			break;
		case 't':
			{
			int LA31_2 = input.LA(2);

			if ((LA31_2=='r'))
			{
				int LA31_3 = input.LA(3);

				if ((LA31_3=='u'))
				{
					int LA31_4 = input.LA(4);

					if ((LA31_4=='e'))
					{
						int LA31_5 = input.LA(5);

						if (((LA31_5>='0' && LA31_5<='9')||(LA31_5>='A' && LA31_5<='Z')||LA31_5=='_'||(LA31_5>='a' && LA31_5<='z')))
						{
							alt31 = 37;
						}
						else
						{
							alt31 = 27;
						}
					}
					else
					{
						alt31 = 37;
					}
				}
				else
				{
					alt31 = 37;
				}
			}
			else
			{
				alt31 = 37;
			}
			}
			break;
		case '|':
			{
			int LA31_2 = input.LA(2);

			if ((LA31_2=='|'))
			{
				alt31 = 29;
			}
			else
			{
				alt31 = 28;
			}
			}
			break;
		case '~':
			{
			alt31 = 30;
			}
			break;
		case '\'':
			{
			alt31 = 32;
			}
			break;
		case '#':
			{
			int LA31_2 = input.LA(2);

			if ((LA31_2=='#'))
			{
				int LA31_3 = input.LA(3);

				if (((LA31_3>='\u0000' && LA31_3<='\uFFFF')))
				{
					alt31 = 33;
				}
				else
				{
					alt31 = 34;
				}
			}
			else if (((LA31_2>='\u0000' && LA31_2<='\"')||(LA31_2>='$' && LA31_2<='\uFFFF')))
			{
				alt31 = 34;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 31, 26, input, 2);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			}
			break;
		case '\"':
			{
			alt31 = 35;
			}
			break;
		case '.':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			alt31 = 36;
			}
			break;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			{
			alt31 = 37;
			}
			break;
		case '\t':
		case '\n':
		case '\r':
		case ' ':
			{
			alt31 = 38;
			}
			break;
		default:
			alt31=31;
			break;

		}

		} finally { DebugExitDecision(31); }
		switch (alt31)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:10: T__22
			{
			DebugLocation(1, 10);
			mT__22(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:16: T__23
			{
			DebugLocation(1, 16);
			mT__23(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:22: T__24
			{
			DebugLocation(1, 22);
			mT__24(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:28: T__25
			{
			DebugLocation(1, 28);
			mT__25(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:34: T__26
			{
			DebugLocation(1, 34);
			mT__26(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:40: T__27
			{
			DebugLocation(1, 40);
			mT__27(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:46: T__28
			{
			DebugLocation(1, 46);
			mT__28(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:52: T__29
			{
			DebugLocation(1, 52);
			mT__29(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:58: T__30
			{
			DebugLocation(1, 58);
			mT__30(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:64: T__31
			{
			DebugLocation(1, 64);
			mT__31(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:70: T__32
			{
			DebugLocation(1, 70);
			mT__32(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:76: T__33
			{
			DebugLocation(1, 76);
			mT__33(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:82: T__34
			{
			DebugLocation(1, 82);
			mT__34(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:88: T__35
			{
			DebugLocation(1, 88);
			mT__35(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:94: T__36
			{
			DebugLocation(1, 94);
			mT__36(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:100: T__37
			{
			DebugLocation(1, 100);
			mT__37(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:106: T__38
			{
			DebugLocation(1, 106);
			mT__38(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:112: T__39
			{
			DebugLocation(1, 112);
			mT__39(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:118: T__40
			{
			DebugLocation(1, 118);
			mT__40(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:124: T__41
			{
			DebugLocation(1, 124);
			mT__41(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:130: T__42
			{
			DebugLocation(1, 130);
			mT__42(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:136: T__43
			{
			DebugLocation(1, 136);
			mT__43(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:142: T__44
			{
			DebugLocation(1, 142);
			mT__44(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:148: T__45
			{
			DebugLocation(1, 148);
			mT__45(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:154: T__46
			{
			DebugLocation(1, 154);
			mT__46(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:160: T__47
			{
			DebugLocation(1, 160);
			mT__47(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:166: T__48
			{
			DebugLocation(1, 166);
			mT__48(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:172: T__49
			{
			DebugLocation(1, 172);
			mT__49(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:178: T__50
			{
			DebugLocation(1, 178);
			mT__50(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:184: T__51
			{
			DebugLocation(1, 184);
			mT__51(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:190: DOT
			{
			DebugLocation(1, 190);
			mDOT(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:194: CHARACTER_LITERAL
			{
			DebugLocation(1, 194);
			mCHARACTER_LITERAL(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:212: TIMESPAN_LITERAL
			{
			DebugLocation(1, 212);
			mTIMESPAN_LITERAL(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:229: DATETIME_LITERAL
			{
			DebugLocation(1, 229);
			mDATETIME_LITERAL(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:246: STRING_LITERAL
			{
			DebugLocation(1, 246);
			mSTRING_LITERAL(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:261: FLOATING_POINT_LITERAL
			{
			DebugLocation(1, 261);
			mFLOATING_POINT_LITERAL(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:284: IDENTIFIER
			{
			DebugLocation(1, 284);
			mIDENTIFIER(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// D:\\repo\\Expressions\\Expressions\\Csharp\\Csharp.g:1:295: WS
			{
			DebugLocation(1, 295);
			mWS(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}

} // namespace  Expressions.Csharp 
